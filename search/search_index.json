{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>On these pages you will find instructions, exercises, cheat sheets, references, and tutorials. Originally the material was meant to teach our apprentices in house a starting point on their quest to obtain new skills and learn new stuff.</p> <p>Courses are more work instructions for learners of new stuff to guide them to a goal. These link over to the guides - call them memorandums on my journey on a lot of webpages where I gather snips and lines that are worth to be kept and remembered - that are organized by topic.</p> <p>Meanwhile this technical documentation might morph towards my personal omnium-gatherum while still trying to be useful for our young learners. Therefore it is and will always be in a flux.</p> <p>Have Fun!</p> <p>Now start with whatever interests you the most.</p> <p>Below follows the default index.md of a MkDocs installation as a quickref.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#emojis-icons-and-keys","title":"Emojis, Icons and Keys","text":"<ul> <li> <code>:smile:</code></li> <li> <code>:material-account-circle:</code></li> <li> <code>:fontawesome-regular-face-laugh-wink:</code></li> <li> <code>:octicons-repo-push-24:</code></li> <li> <code>:material-apple-keyboard-command:</code></li> <li> <code>:material-apple-keyboard-option:</code></li> <li> <code>:material-apple-keyboard-control:</code></li> <li> <code>:material-apple-keyboard-shift:</code></li> <li> <code>:material-keyboard-return:</code></li> <li> <code>:material-keyboard-space:</code></li> <li>Space+F <code>++space+f++</code></li> <li>Cmd+F1 <code>++command+f1++</code></li> </ul> <p>For more icons and emojis use the emojis/icons search bar in the mkdocs-material documentation. The keyboard keys rendering is done using the <code>pymxdown.keys</code> extension.</p> <p>For the full documentation visit material-mkdocs and mkdocs.org.</p>"},{"location":"#mermaid-supported","title":"Mermaid supported","text":"<pre><code>sequenceDiagram\n  title: Cool Seq Diagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"about/","title":"About Me","text":""},{"location":"about/#about-me","title":"About Me","text":"<p>I'm a professional Linux System Engineer with 20 years experience. I worked with several Linux Distributions so far, such as (from latest to earliest):</p> <ul> <li>Ubuntu Server 22.04 LTS and 24.04 LTS</li> <li>Rocky Linux 8 and 9</li> <li>CentOS 7</li> <li>Red Hat Enterprise Linux 6</li> <li>Ubuntu 10.04 - 14.04</li> <li>Fedora Core 3</li> <li>SuSE Linux 6.3 - 8.1</li> </ul>"},{"location":"about/#it-quotes","title":"IT Quotes","text":"<p>\"There are only two hard things in computer science: cache invalidation and naming things.\" -- Phil Karlton</p> <p>\"The earlier you catch defects, the cheaper they are to fix.\" -- David Farley</p>"},{"location":"mdcheat/","title":"MdCheat","text":""},{"location":"mdcheat/#markdown-cheatsheet","title":"Markdown Cheatsheet","text":"<p>This page outlines all stuff available by installing the base Python-Markdown (comes with MkDocs) and the additional bundle PyMdown Extensions.</p>"},{"location":"mdcheat/#headings","title":"Headings","text":"<pre><code>### The 3rd level\n\n#### The 4th level\n\n##### The 5th level\n\n###### The 6th level\n\n## Headings &lt;small&gt;with secondary text&lt;/small&gt;\n\n### The 3rd level &lt;small&gt;with secondary text&lt;/small&gt;\n\n#### The 4th level &lt;small&gt;with secondary text&lt;/small&gt;\n\n##### The 5th level &lt;small&gt;with secondary text&lt;/small&gt;\n\n###### The 6th level &lt;small&gt;with secondary text&lt;/small&gt;\n</code></pre>"},{"location":"mdcheat/#the-3rd-level","title":"The 3rd level","text":""},{"location":"mdcheat/#the-4th-level","title":"The 4th level","text":""},{"location":"mdcheat/#the-5th-level","title":"The 5th level","text":""},{"location":"mdcheat/#the-6th-level","title":"The 6th level","text":""},{"location":"mdcheat/#headings-with-secondary-text","title":"Headings with secondary text","text":""},{"location":"mdcheat/#the-3rd-level-with-secondary-text","title":"The 3rd level with secondary text","text":""},{"location":"mdcheat/#the-4th-level-with-secondary-text","title":"The 4th level with secondary text","text":""},{"location":"mdcheat/#the-5th-level-with-secondary-text","title":"The 5th level with secondary text","text":""},{"location":"mdcheat/#the-6th-level-with-secondary-text","title":"The 6th level with secondary text","text":""},{"location":"mdcheat/#emphasis","title":"Emphasis","text":"<pre><code>Emphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n</code></pre> <p>Emphasis, aka italics, with asterisks or underscores.</p> <p>Strong emphasis, aka bold, with asterisks or underscores.</p> <p>Combined emphasis with asterisks and underscores.</p> <p>Strikethrough uses two tildes. ~~Scratch this.~~</p>"},{"location":"mdcheat/#lists","title":"Lists","text":"<p>(In this example, leading and trailing spaces are shown with with dots: \u22c5)</p> <pre><code>1. First ordered list item\n2. Another item\n\u22c5\u22c5\u22c5\u22c5* Unordered sub-list.\n\u22c5\u22c5\u22c5\u22c5* Item 2\n\u22c5\u22c5\u22c5\u22c5* Item 3\n1. Actual numbers don't matter, just that it's a number\n\u22c5\u22c5\u22c5\u22c51. Ordered sub-list\n\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c51. Ordered subsub-list\n\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c51. Item 2\n\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c51. Item 3\n\u22c5\u22c5\u22c5\u22c51. Item 2\n\u22c5\u22c5\u22c5\u22c51. Item 3\n4. And another item.\n\n\u22c5\u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n\u22c5\u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5\n\u22c5\u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5\n\u22c5\u22c5\u22c5\u22c5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n</code></pre> <ol> <li>First ordered list item</li> <li>Another item<ul> <li>Unordered sub-list.</li> <li>Item 2</li> <li>Item 3</li> </ul> </li> <li>Actual numbers don't matter, just that it's a number<ol> <li>Ordered sub-list<ol> <li>Ordered subsub-list</li> <li>Item 2</li> <li>Item 3</li> </ol> </li> <li>Item 2</li> <li>Item 3</li> </ol> </li> <li> <p>And another item.</p> <p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).</p> <p>To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> </li> <li> <p>Unordered list can use asterisks</p> </li> <li>Or minuses</li> <li>Or pluses</li> </ol>"},{"location":"mdcheat/#links","title":"Links","text":"<p>There are two ways to create links.</p> <pre><code>[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or &lt;http://www.example.com&gt; and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n</code></pre> <p>I'm an inline-style link</p> <p>I'm an inline-style link with title</p> <p>I'm a reference-style link</p> <p>I'm a relative reference to a repository file</p> <p>You can use numbers for reference-style link definitions</p> <p>Or leave it empty and use the link text itself.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p>"},{"location":"mdcheat/#images","title":"Images","text":"<pre><code>Here's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n</code></pre> <p>Here's our logo (hover to see the title text):</p> <p>Inline-style: </p> <p>Reference-style: </p>"},{"location":"mdcheat/#code-and-syntax-highlighting","title":"Code and Syntax Highlighting","text":"<p>Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and Markdown Here -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page.</p> <pre><code>Inline `code` has `back-ticks around` it.\n</code></pre> <p>Inline <code>code</code> has <code>back-ticks around</code> it.</p> <p>Blocks of code are either fenced by lines with three back-ticks <code>```</code>, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only these support syntax highlighting.</p> <pre><code>var s = \"JavaScript syntax highlighting\";\nalert(s);\n</code></pre> <pre><code>s = \"Python syntax highlighting\"\nprint s\n</code></pre> <pre><code>No language indicated, so no syntax highlighting in Markdown Here (varies on Github).\nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n</code></pre> <p>Even tabbed code example for different language are possible:</p> BashCC++C# <pre><code>#!/bin/bash\nSTR=\"Hello World!\"\necho $STR\n</code></pre> <pre><code>#include\n\nint main(void) {\n  printf(\"hello, world\\n\");\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main() {\n  std::cout &lt;&lt; \"Hello, world!\\n\";\n  return 0;\n}\n</code></pre> <pre><code>using System;\n\nclass Program {\n  static void Main(string[] args) {\n    Console.WriteLine(\"Hello, world!\");\n  }\n}\n</code></pre>"},{"location":"mdcheat/#tables","title":"Tables","text":"<p>Tables aren't part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.</p> <pre><code>Colons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n</code></pre> <p>Colons can be used to align columns.</p> Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> Markdown Less Pretty Still <code>renders</code> nicely 1 2 3"},{"location":"mdcheat/#blockquotes","title":"Blockquotes","text":"<pre><code>&gt; Blockquotes are very handy in email to emulate reply text.\n&gt; This line is part of the same quote.\n\nQuote break.\n\n&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n</code></pre> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> <p>Quote break.</p> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.</p> <p>Blockquote nesting is possible:</p> <pre><code>&gt; **Sed aliquet**, neque at rutrum mollis, neque nisi tincidunt nibh, vitae\n  faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem\n  [libero fermentum](#) urna, ut efficitur elit ligula et nunc.\n\n&gt; &gt; Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla.\n    Ut sit amet placerat ante. Proin sed **elementum** __nulla__. Nunc vitae sem odio.\n    Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum.\n    eu odio.\n\n&gt; &gt; &gt; `Suspendisse rutrum facilisis risus`, eu posuere neque commodo a.\n      Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo\n      bibendum, sodales mauris ut, tincidunt massa.\n</code></pre> <p>Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh, vitae   faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem   libero fermentum urna, ut efficitur elit ligula et nunc.</p> <p>Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla.     Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio.     Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum.     eu odio.</p> <p><code>Suspendisse rutrum facilisis risus</code>, eu posuere neque commodo a.       Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo       bibendum, sodales mauris ut, tincidunt massa.</p> <p>Other content blocks within a blockquote</p> <p>Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu   lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl,   sit amet laoreet nibh.   </p><pre><code>var _extends = function(target) {\n  for (var i = 1; i &lt; arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target;\n};\n</code></pre><p></p> <p>Praesent at <code>:::js return target</code>, sodales nibh vel, tempor felis. Fusce       vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices.       Donec consectetur mauris non neque imperdiet, eget volutpat libero.</p>"},{"location":"mdcheat/#inline-html","title":"Inline HTML","text":"<p>You can also use raw HTML in your Markdown, and it'll mostly work pretty well.</p>"},{"location":"mdcheat/#horizontal-rule","title":"Horizontal Rule","text":"<pre><code>Three or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n</code></pre> <p>Three or more...</p> <p>Hyphens</p> <p>Asterisks</p> <p>Underscores</p>"},{"location":"mdcheat/#line-breaks","title":"Line Breaks","text":"<p>My basic recommendation for learning how line breaks work is to experiment and discover -- hit &lt;Enter&gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend.</p> <p>Here are some things to try out:</p> <pre><code>Here's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n</code></pre> <p>Here's a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a separate paragraph.</p> <p>This line is also begins a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the same paragraph.</p>"},{"location":"mdcheat/#youtube-videos","title":"YouTube Videos","text":"<p>They can't be added directly but you can add an image with a link to the video like this:</p> <pre><code>&lt;a href=\"http://www.youtube.com/watch?feature=player_embedded&amp;v=YOUTUBE_VIDEO_ID_HERE\n\" target=\"_blank\"&gt;&lt;img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /&gt;&lt;/a&gt;\n</code></pre> <p>Or, in pure Markdown, but losing the image sizing and border:</p> <pre><code>[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n</code></pre>"},{"location":"mdcheat/#admonition","title":"Admonition","text":"<pre><code>!!! type \"optional explicit title within double quotes\"\n    Any number of other indented markdown elements.\n\n    This is the second paragraph.\n</code></pre> <p>Some title</p> <p>Any number of other indented markdown elements.</p> <p>This is the second paragraph.</p> <p>And this is outside the admonition again.</p> <p>If you don\u2019t want a title, use a blank string \"\".</p> <p>Don't do this at home!</p> <p>rST suggests the following \u201ctypes\u201d: attention, caution, danger, error, hint, important, note, tip, and warning:  </p> <p>Some title</p> <p>This is type note</p> <p>Some title</p> <p>This is type hint</p> <p>Some title</p> <p>This is type tip</p> <p>Some title</p> <p>This is type important</p> <p>Some title</p> <p>This is type attention</p> <p>Some title</p> <p>This is type caution</p> <p>Some title</p> <p>This is type warning</p> <p>Some title</p> <p>This is type danger</p> <p>Some title</p> <p>This is type error</p>"},{"location":"mdcheat/#abbreviations","title":"Abbreviations","text":"<pre><code>The HTML specification\nis maintained by the W3C.\n\n*[HTML]: Hyper Text Markup Language\n*[W3C]:  World Wide Web Consortium\n</code></pre> <p>The HTML specification is maintained by the W3C.</p> <p>It's also possible to manage abbreviations centrally in a glossary. See mkdocs-material documentation on this matter.</p>"},{"location":"mdcheat/#definition-lists","title":"Definition Lists","text":"<pre><code>Apple\n:   Pomaceous fruit of plants of the genus Malus in\n    the family Rosaceae.\n\nOrange\n:   The fruit of an evergreen tree of the genus Citrus.\n</code></pre> Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Orange The fruit of an evergreen tree of the genus Citrus."},{"location":"mdcheat/#footnotes","title":"Footnotes","text":"<p>Footnotes<sup>1</sup> have a label<sup>2</sup> and the footnote's content. Another Footnote<sup>3</sup></p>"},{"location":"mdcheat/#critic-markup","title":"Critic Markup","text":"<p>There are five types of Critic marks:</p> <ul> <li>Addition <code>addition</code></li> <li>Deletion <code>deletion </code></li> <li>Substitution <code>thisthat</code></li> <li>Comment <code>I'm a comment </code></li> <li>Highlight <code>This is hilghlighted </code></li> </ul> <p>This a sample for a exchangesubstitution.</p> <p>When used in combination the marks can indicate more complex changes.</p> <pre><code>Don\u2019t go around saying to people that  the world owes you a living. The\nworld owes you nothing. It was here first. OneOnly one thing is\nimpossible for God: To find any sense in any copyright law on the\nplanet. Truth is stranger than fictiontrue, but it is because\nFiction is obliged to stick to possibilities; Truth isn\u2019t.\n</code></pre> <p>The above paragraphs should render to HTML in the following manner.</p> <pre><code>Don\u2019t go around saying&lt;del&gt; to people that&lt;/del&gt; the world owes you a\nliving. The world owes you nothing. It was here first.\n&lt;del&gt;One&lt;/del&gt;&lt;ins&gt;Only one&lt;/ins&gt; thing is impossible for God: To find\n&lt;ins&gt;any&lt;/ins&gt; sense in any copyright law on the planet. &lt;mark&gt;Truth is\nstranger than fiction&lt;/mark&gt;&lt;span class=\u201dcritic comment\u201d&gt;true&lt;/span&gt;, but it\nis because Fiction is obliged to stick to possibilities; Truth isn\u2019t.\n</code></pre> <p>License: CC-BY</p> <ol> <li> <p>This is a footnote content.\u00a0\u21a9</p> </li> <li> <p>A footnote on the label: \"@#$%\".\u00a0\u21a9</p> </li> <li> <p>Another content\u00a0\u21a9</p> </li> </ol>"},{"location":"wb_demo/","title":"WB_KW32","text":""},{"location":"wb_demo/#kw3221-ein-beispielwochenbericht","title":"KW32/21: Ein Beispielwochenbericht","text":"<p>Arbeitsablauf</p> <p>Hier den Arbeistablauf erfassen. In diesen \"admnitions\" kann alles eingef\u00fcgt und formatiert werden, z.B. weitere adminition:</p> <p>Hier aufgepasst</p> <p>Sonst geht was schief.</p> <p>Oder auch code: </p><pre><code>echo \"Hello World\"\n</code></pre><p></p> <p>Skizzen, Fotos, Bilder</p> <p>Hier Bilder einf\u00fcgen oder bei Nichtgebrauch entfernen.</p> <p>Kompetenzen</p> <p>Hier Inhalt zum Thema Kompetenzen einf\u00fcgen oder bei Nichtgebrauch entfernen.</p> <p>Bemerkungen</p> <p>Das ist eine Bemerkung zum Lernbericht. Bei Nichtgebrauch entfernen.</p> <p>Dieser Lernbericht ist durch custom adminitions gestaltet. Die Datei <code>/docs/stylesheets/extra.css</code> enth\u00e4lt das Styling. Siehe in der mkdocs-material doku, wie man so etwas macht.</p>"},{"location":"azure/decision_trees/","title":"Decision Trees","text":""},{"location":"azure/decision_trees/#azure-decision-trees","title":"Azure Decision Trees","text":""},{"location":"azure/decision_trees/#choose-a-compute-service","title":"Choose a compute service","text":"<p>Use the following decision tree to help you choose a compute service for your app, see the architecture center for more details.</p> <p></p>"},{"location":"azure/decision_trees/#select-a-data-store-for-your-app","title":"Select a data store for your app","text":"<p>Use the following decision tree to help you choose a data store for your app, see the architecture center for more details.</p> <p></p>"},{"location":"azure/decision_trees/#choose-a-load-balancing-service","title":"Choose a load balancing service","text":"<p>Use the following decision tree to help you choose the load balancing service for your workloads, see Load-balancing options</p> <p></p>"},{"location":"azure/decision_trees/#architectural-styles","title":"Architectural Styles","text":"<p>The following list shows a set of architectural styles commonly found in cloud applicaitons, see Architectural Styles for more details.</p> Architecture style Dependency management Domain type N-tier Horizontal tiers divided by subnet Traditional business domain. Frequency of updates is low. Web-queue-worker Front and backend jobs, decoupled by async messaging. Relatively simple domain with some resource intensive tasks. Microservices Vertically (functionally) decomposed services that call each other through APIs. Complicated domain. Frequent updates. Event-driven architecture Producer/consumer. Independent view per sub-system. IoT and real-time systems. Big data Divide a huge dataset into small chunks. Parallel processing on local datasets. Batch and real-time data analysis. Predictive analysis using ML. Big compute Data allocation to thousands of cores. Compute intensive domains such as simulation."},{"location":"azure/faq/","title":"FAQ","text":""},{"location":"azure/faq/#faq","title":"FAQ","text":""},{"location":"azure/faq/#sub-resource-of-services","title":"Sub-resource of Services","text":"<p>The Sub-resources are case-sentitive and are used when creating private endpoints. The AVM modules are settting this field automatically, i.e. [\"vault\"] for a key vault or [\"blob\"] for a Blob Storage. For terraform, this field is optional for <code>azurerm_private_endpoint</code>.</p> <pre><code>resource \"azurerm_private_endpoint\" \"example\" {\n  name                = \"example-endpoint\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  subnet_id           = azurerm_subnet.endpoint.id\n\n  private_service_connection {\n    name                           = \"example-privateserviceconnection\"\n    private_connection_resource_id = azurerm_key_vault.example.id\n    is_manual_connection           = false\n    sub_resource_names             = [\"vault\"] # Optional, can be\n  }\n}\n</code></pre> Private-link resource name Resource type Sub-resources Application Gateway Microsoft.Network/applicationgateways Frontend IP Configuration name Azure AI Search Microsoft.Search/searchServices searchService Azure AI services Microsoft.CognitiveServices/accounts account Azure API for FHIR (Fast Healthcare Interoperability Resources) Microsoft.HealthcareApis/services fhir Azure API Management Microsoft.ApiManagement/service Gateway Azure App Configuration Microsoft.Appconfiguration/configurationStores configurationStores Azure App Service Microsoft.Web/hostingEnvironments hosting environment Azure App Service Microsoft.Web/sites sites Azure Attestation Service Microsoft.Attestation/attestationProviders standard Azure Automation Microsoft.Automation/automationAccounts Webhook, DSCAndHybridWorker Azure Backup Microsoft.RecoveryServices/vaults AzureBackup, AzureSiteRecovery Azure Batch Microsoft.Batch/batchAccounts batchAccount, nodeManagement Azure Cache for Redis Microsoft.Cache/Redis redisCache Azure Cache for Redis Enterprise Microsoft.Cache/redisEnterprise redisEnterprise Azure Container Apps Microsoft.App/ManagedEnvironments managedEnvironments Azure Container Registry Microsoft.ContainerRegistry/registries registry Azure Cosmos DB Microsoft.AzureCosmosDB/databaseAccounts SQL, MongoDB, Cassandra, Gremlin, Table Azure Cosmos DB for MongoDB vCore Microsoft.DocumentDb/mongoClusters mongoCluster Azure Cosmos DB for PostgreSQL Microsoft.DBforPostgreSQL/serverGroupsv2 coordinator Azure Data Explorer Microsoft.Kusto/clusters cluster Azure Data Factory Microsoft.DataFactory/factories dataFactory Azure Database for MariaDB Microsoft.DBforMariaDB/servers mariadbServer Azure Database for MySQL - Flexible Server Microsoft.DBforMySQL/flexibleServers mysqlServer Azure Database for MySQL - Single Server Microsoft.DBforMySQL/servers mysqlServer Azure Database for PostgreSQL - Flexible server Microsoft.DBforPostgreSQL/flexibleServers postgresqlServer Azure Database for PostgreSQL - Single server Microsoft.DBforPostgreSQL/servers postgresqlServer Azure Databricks Microsoft.Databricks/workspaces databricks_ui_api, browser_authentication Azure Device Provisioning Service Microsoft.Devices/provisioningServices iotDps Azure Digital Twins Microsoft.DigitalTwins/digitalTwinsInstances API Azure Event Grid Microsoft.EventGrid/domains domain Azure Event Grid Microsoft.EventGrid/topics topic Azure Event Hub Microsoft.EventHub/namespaces namespace Azure File Sync Microsoft.StorageSync/storageSyncServices File Sync Service Azure HDInsight Microsoft.HDInsight/clusters cluster Azure IoT Central Microsoft.IoTCentral/IoTApps IoTApps Azure IoT Hub Microsoft.Devices/IotHubs iotHub Azure Key Vault Microsoft.KeyVault/vaults vault Azure Key Vault HSM (hardware security module) Microsoft.Keyvault/managedHSMs HSM Azure Kubernetes Service - Kubernetes API Microsoft.ContainerService/managedClusters management Azure Machine Learning Microsoft.MachineLearningServices/registries amlregistry Azure Machine Learning Microsoft.MachineLearningServices/workspaces amlworkspace Azure Managed Disks Microsoft.Compute/diskAccesses managed disk Azure Media Services Microsoft.Media/mediaservices keydelivery, liveevent, streamingendpoint Azure Migrate Microsoft.Migrate/assessmentProjects project Azure Monitor Private Link Scope Microsoft.Insights/privatelinkscopes azuremonitor Azure Relay Microsoft.Relay/namespaces namespace Azure Service Bus Microsoft.ServiceBus/namespaces namespace Azure SignalR Service Microsoft.SignalRService/SignalR signalr Azure SignalR Service Microsoft.SignalRService/webPubSub webpubsub Azure SQL Database Microsoft.Sql/servers SQL Server (sqlServer) Azure SQL Managed Instance Microsoft.Sql/managedInstances managedInstance Azure Static Web Apps Microsoft.Web/staticSites staticSites Azure Storage Microsoft.Storage/storageAccounts Blob (blob, blob_secondary), Table (table, table_secondary), Queue (queue, queue_secondary), File (file, file_secondary), Web (web, web_secondary), Dfs (dfs, dfs_secondary) Azure Synapse Microsoft.Synapse/privateLinkHubs web Azure Synapse Analytics Microsoft.Synapse/workspaces Sql, SqlOnDemand, Dev Azure AI Video Indexer Microsoft.VideoIndexer/accounts account Azure Virtual Desktop - host pools Microsoft.DesktopVirtualization/hostpools connection Azure Virtual Desktop - workspaces Microsoft.DesktopVirtualization/workspaces feed, global Device Update for IoT Hub Microsoft.DeviceUpdate/accounts DeviceUpdate Integration Account (Premium) Microsoft.Logic/integrationAccounts integrationAccount Microsoft Purview Microsoft.Purview/accounts account Microsoft Purview Microsoft.Purview/accounts portal Power BI Microsoft.PowerBI/privateLinkServicesForPowerBI Power BI Private Link service (your own service) Microsoft.Network/privateLinkServices empty Resource Management Private Links Microsoft.Authorization/resourceManagementPrivateLinks ResourceManagement <p>Sources:</p> <ul> <li>What is a  private endpoint?</li> <li>azurerm_private_endpoint]</li> </ul>"},{"location":"azure/linklist/","title":"Bookmarks","text":""},{"location":"azure/linklist/#azure-documentation-links","title":"Azure Documentation Links","text":"<p>Find below valuable direct links into Microsoft Learn.</p>"},{"location":"azure/linklist/#overview-pages","title":"Overview Pages","text":"<ul> <li>Azure Architecture Center</li> <li>Make Technology Choices for Azure Solutions</li> <li>Application Landing Zone Architectures</li> <li>Product Availablility By Region</li> <li>Microsoft Datacenters Explorer</li> </ul>"},{"location":"azure/linklist/#cloud-adoption-framework","title":"Cloud Adoption Framework","text":"<ul> <li>[Common subscirption vending product lines](https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/landing-zones/subscription-vending-products</li> <li>Infrastructure as Code (IaC)</li> </ul>"},{"location":"azure/linklist/#networking","title":"Networking","text":"<ul> <li>Patterns for inter-spoke networking</li> <li>Usa a split-brain DNS configuration to host a web app in Azure</li> </ul>"},{"location":"azure/linklist/#infrastructure-as-code-iac","title":"Infrastructure as Code (IaC)","text":"<ul> <li>Terraform on Azure</li> </ul>"},{"location":"azure/linklist/#services","title":"Services","text":""},{"location":"azure/linklist/#app-service","title":"App Service","text":"<ul> <li>Deployment best practice</li> </ul>"},{"location":"courses/myitjournal/","title":"Work instructions","text":""},{"location":"courses/myitjournal/#my-it-journal","title":"My IT Journal","text":"<p>This is our first project. We want to create a documentation where you can write down your daily and weekly reports that you are obliged to write. Previously you have done this in the Confluence Wiki of Informatikdienste. Wouldn't it be nicer to have it somewhat more accessible and more modern? You can even build a showcase of your skills with it!</p> <p>Now let us first define the requirements and the goals of our solution:</p> <ul> <li>The documentation must be versioned, therefore we want to manage it in a Git repository.</li> <li>Being in a Git repository and published over at https://github.com allows   others to participate.</li> <li>As a learner I don't want to write this webpage using HTML, Javascript and CSS   but use a framework that creates static code. The framework must allow me to   write markdown.</li> </ul>"},{"location":"courses/myitjournal/#conda","title":"Conda","text":"<p>The first step is optional but in our opinion worth the effort. MkDocs is software written in Python. As such it has dependencies and needs other packages. Conda is one possible tool for dependency management for the languages Python and R, see the Wikipedia page for a bigger overview.</p> <p>Knowing Conda helps to manage different Python environments that do not influence each others.</p> <p>Task: Install Miniconda</p> <ul> <li>Install Miniconda<ul> <li>macOS: just install Miniconda with <code>brew</code></li> <li>Linux: use the installer, see documentation</li> </ul> </li> <li>Familiarize yourself with the <code>conda</code> command by using the getting started   guide:<ul> <li>Create, activate, deactivate and destroy some test environments as outlined   in the Managing environments</li> <li>Create environments with a specific version of Python, i.e. 3.9.x, see   Managing Python</li> <li>Install some packages with <code>conda</code> though we will use pip later when   installing <code>mkdocs</code>, see Managing packages</li> <li>There is also a printable cheat sheet at the bottom of conda's getting   started page.</li> </ul> </li> </ul>"},{"location":"courses/myitjournal/#mkdocs-and-material-for-mkdocs","title":"MkDocs and Material for MkDocs","text":"<p>Now we are ready to install the tool of choice - MkDocs. We will not only install MkDocs itself but also the package \"Material for MkDocs\".</p> <p>MkDocs itself is a static site generator geared towards (technical) project documentation. Material for MkDocs is an additional package providing a modern responsive them for the web and a lot more features like a comprehensive search and a lot more of styling elements that what MkDocs itself provides. Those two packages are used to create our HPC used guide.</p> <p>Documentation for the tools can be found on their websites at https://www.mkdocs.org/ and https://squidfunk.github.io/mkdocs-material/. The latter is very good and will help in every aspect. Stick primarily to this source!</p> <p>Having <code>conda</code> in place now lets us create a Conda environment for these tools.</p> <p>Task: Install Material for MkDocs</p> <ul> <li>Create a Conda environment called \"itjournal\" and activate it</li> <li>Install latest Python 3.x (this also installs pip - the package manager)</li> <li>Then install Material for MkDocs using pip. Notice that MkDocs itself gets   automatically installed as it is a dependency of Material for MkDocs.</li> <li>Do you see the help message, when you run <code>mkdocs --help</code>?</li> </ul> <p>Now that the <code>mkdocs</code> command is available and the respective Material theme is installed, we can start our documentation.</p> <p>Task: Create and initialize your journal</p> <ul> <li>Create a new directory, name as you like/see fit</li> <li>Enter the directory and make it a git repository</li> <li>Create a new GitHub repo over at github.com</li> <li>Add the remote repo as the origin of your local git repo</li> <li>Then create an initial MkDocs project, see getting started guide of   mkdocs-material</li> <li>Add and commit these files to the repository as first initial commit and   starting point of your journey</li> </ul> <p>The documentation of Material for MkDocs itself is a valuable source for inspiration. Also this \"demo/learning journal\" may inspire you. Think especially about the structure of your documentation, where you want to publish the Tages- and Wochenberichte and probably some words about you.</p> <p>MkDocs has a built-in server to locally render and see, what the markdown you are writing actually will look like when rendered to the static website, see chapter Preview as you write. Make use of it and open <code>https://localhost:8000</code> in you browser. It magically reloads upon changing anything in your documentation, doesn't it?</p> <p>Don't forget to do regular \"atomic\" commits, i.e. after changing a layout element or for each Tages- or Wochenbericht.</p> <p>As soon as you work is done and you have something new to share with the world, it's time to publish a new (or a first) version of your documentation. To achieve this, <code>mkdocs</code> will build the static pages and publishes the result. Managing the repository over at github.com and publishing as GitHub pages at github.io, things are very easy to accomplish. github.com will automatically recognize the created <code>gh-pages</code> branch that <code>mkdocs</code> generates. Things \"automagically\" just work as expected. Nevertheless...</p> <p>Task: Publish and verify</p> <ul> <li>View the \"What is GitHub Pages\" Video at https://www.youtube.com/watch?v=2MsN8gpT6jY</li> <li>Use <code>mkdocs</code> to publish as GitHub pages, see section \"with MkDocs\" at the   page Publishing your site</li> <li>Where is your site published now? What is the URL to your rendered pages?</li> </ul> <p>Later we will improve the project to automatically build the static pages on every push to the main branch, but for now, we do it manually to get used to it.</p>"},{"location":"courses/tools/","title":"Tools","text":""},{"location":"courses/tools/#basic-tools","title":"Basic Tools","text":""},{"location":"courses/tools/#homebrew","title":"Homebrew","text":"<p>Working on a desktop OS with a GUI (like I do on macOS), we as sysadmins are too lazy to move mices (use trackpads) to surf to websites to download installers to then click through this installer to finally have a small tool or programm installed. In addition, speaking of macOS, it's not possible to uninstall a piece of software automatically. This is a manual process done in Finder. Hence we are in need of a good package manager that works like apt-get/yum found in Linux distructions and that allows us to script things and install stuff automatically. The most used package manager on macOS these days is Homebrew. Homebrew is even available on Linux and brings some benefits over the distribution repositories as it knows a lot more modern tools.</p> <p>Hint</p> <p>For Windows users there's an equivalent called Chocolatey.</p> <p>Find some facts about Homebrew at Wikipedia Homebrew and its documentation can be found at https://brew.sh/</p> <p>Task</p> <p>The above should be enough to get you started. Now</p> <ul> <li>Install Homebrew</li> <li>Verify its in a working state (see commands available)</li> <li>Install a first CLI tool: wget</li> </ul>"},{"location":"courses/tools/#vim","title":"Vim","text":"<p>Next on the plan is Vim the ubiquitous, powerful, command line-based text editor. Sure the are the GUI-based editors that you are used to, such as Visual Studio Code, Sublime Text or Atom. But, as previously said, when working on Linux, Vim is already installed. No need to install \"your\" text editor first. It's just there there</p> <p>https://de.wikipedia.org/wiki/Vim https://www.vim.org/</p> <p>To install Vim, we now have Homebrew. There is a more modern drop-in replacement called [Neovim] that has Lua support built-in. It works exactly like Vim but has some other advantages beyond this course, but if you fall in love with Vim, you should consider switching. Or you already install it now.</p> <p>Install Vim or Neovim</p> <p>Now either install <code>Vim</code> or <code>Neovim</code>. You know how. ;</p>"},{"location":"courses/tools/#oracle-virtualbox","title":"Oracle Virtualbox","text":"<p>It is of great value to be able to test as much as possible locally on your machine that you have always with you. Spinning up a Linux box with the distribution needed in that moment is priceless. For the sake of our course we will first make use of Virtual Machines (VM). Later we might also explorer containers with Docker or Podman. The tool of choice to work with virtual machines is VirtualBox (vbox). This tool is free of charge and very mature and valuable. Other tools include Parallels Dektop, QEMU, VMware Fusion and others.  </p> <p>https://de.wikipedia.org/wiki/VirtualBox https://www.virtualbox.org/manual/UserManual.html#create-vm-wizard</p> <p>Install VirtualBox</p> <p>Also this tool is installable through Homebrew and split into two packages. While the formula <code>virtualbox</code> will install the tools, the forumla <code>virtualbox-extension-pack</code> will install additional features like USB3 and others. Install both of them.</p>"},{"location":"courses/tools/#vagrant","title":"Vagrant","text":"<p>As we do not want by hand (installation wizards, you know), we need another tool that helps us with managing virtual machines. It allows to define virtual machines in a text file and then automatically spin the machines up based on these definitions.</p> <p>https://de.wikipedia.org/wiki/Vagrant_%28Software%29 https://learn.hashicorp.com/collections/vagrant/getting-started</p> <p>The latter is an invaluable quick start guide. Start your exploration there. This guide alone will introduce you to a lot of important features and use cases. Take the time and go through it.</p> <p>Install Vagrant</p> <p>As you might have guessed, also Vagrant is installable using Homebrew. Install the tool using the formula <code>vagrant</code></p>"},{"location":"courses/webappstack/","title":"Webapp Stack","text":""},{"location":"courses/webappstack/#webapp-stack","title":"Webapp Stack","text":""},{"location":"courses/webappstack/#goal","title":"Goal","text":"<p>This project's goal is to setup a local LAMP-Stack to be able to install a PHP/MySQL-based web application onto it. To learn a different aspects the following assumptions are made:</p> <ul> <li>We pretend that the app will use quite some resources and therefore we need   two linux servers:</li> <li>webserver will run the Apache webserver and listen to HTTP requests (80       first, 443 at a later stage)</li> <li>dbserver is running the Mariadb database server and act as the database       backend for the webapp</li> <li>The webserver needs to provide PHP 8 to be able to run PHP-based webapplications</li> <li>Communication to the Webserver is finally secured using SSL, which makes a   x509-certificate necessary</li> </ul> <p>You are free to choose the webapplication that you want to deploy. There are many PHP-webapplications out there. A save choice might be a forum or a content management system, i.e. Flarum, phpBB, Wordpress, ...</p>"},{"location":"courses/webappstack/#setup-local-virtual-servers","title":"Setup Local Virtual Servers","text":"<p>As we setup the local severs with the help of vagrant, we will generate at least a Vagrantfile but for sure also scripts and the like. Therefore it's best to start off with a versioned project dir, always, and keep in mind to create commits based on steps we successfully carry out.</p> <p>Project initialization and local server setup</p> <ul> <li>Create a project dir</li> <li>Initialize an empty git repo (use <code>gh repo</code> for that and enjoy its   convienience )</li> <li>Create the Vagrantfile</li> <li>Initialize a new Vagrantfile using the vagrant command</li> <li>Work with the rockylinux 8 basebox provided by geerlingguy (geerlingguy/rockylinux8)</li> <li>Configure 2 severs in this Vagrant file: webserver and dbserver</li> </ul> <p>Consider that the two linux server have to communicate with each other and you want to connect to them from your browser and/or your CLI. Realize this using the private networking feature (type internal networking) by adding an additional network interface to the servers. In addition you want to be able to consume the webiste from your host machine, therefore, you have to forward ports 80 and 443 of the guestOS to your laptop, good local ports on the host OS could be 8080 and 8443.</p>"},{"location":"courses/webappstack/#provision-the-databse-server","title":"Provision the Databse Server","text":"<p>Database server installation</p> <ol> <li>Install the database server - either MariaDB or MySQL - using <code>dnf</code></li> <li>Configure the database server using the ini files and<ul> <li>set default charet to utf8mb4</li> <li>set default collation utf8mb4_unicode_ci</li> </ul> </li> <li>Secure the server for production use - try to figure out, which steps    to carry out!</li> <li>(optional): To be able to connect from your host system to your dbserver,    you have to forward port 3306 to your host, i.e. to port 8306.</li> </ol> Solutions - Databse server installation <p>Please find my approach to the above tasks in the script provision_dbserver.sh. Regarding the charset question set every aspect to charset <code>utf8mb4</code> and collation <code>utf8mb4_unicode_ci</code>, see my.cnf.d/charset.cnf. For details of the configuration and the reasoning see the guide on Charsets.</p> <p>Is it working? Can you connect from the database server itself? Is it no longer possible to connect using user <code>root</code> with an empty password?</p> Solution - Connecting from host system to dbserver <p>First you need to install the mysql client binary. If you only want to connect to a remote DB server without having the need for a local DB server on the host itself, you can safely just install the client package <code>mysql-client</code> - else install <code>mariadb</code> that consists of the server and the client binaries. </p><pre><code>brew install mysql-client\n# As it is keg only, either force linkng:\nbrew link mysql-client -f\n# or add the bin path to your $PATH variable, i.e.:\necho 'export PATH=\"/usr/local/opt/mysql-client/bin:$PATH\"' &gt;&gt; ~/.bash_profile\n</code></pre><p></p> <p>Now you can connec to to the VMs using the mysql client binary. Use the IP address that you assigned in your <code>Vagrantfile</code>, in my case: </p><pre><code>mysql -h localhost -u demouser -p\n</code></pre><p></p> <p>Does it work?</p> <p>Help, connecting to localhost does not work!</p> <p>Connecting won't work if you want to connect to the forwarded port 3306 on your host machine. MariaDB/MySQL on macOS/Linux chooses to connect to a socket when connecting to <code>localhost</code> or when no server is specified. To connect using the TCP/IP protocol, you have to use an IP address. Don't forget to use the port that you actually used for port forwarding, in my case: </p><pre><code>mysql -h 127.0.0.1 --port 8306 -u demouser -p\n</code></pre><p></p>"},{"location":"courses/webappstack/#provision-the-webserver","title":"Provision the Webserver","text":"<p>Installing PHP-8</p> <p>Next we want to be able to run web applications written in PHP. The latest available major version of PHP is version 8.</p> <p>PHP-8 not available</p> <p>Rocky Linux 8 comes with PHP version 7.2, 7.3 and 7.4, which might be too old for some PHP webapps. But PHP 8 is not available in the repositories of the distribution (same goes for CentOS-8, RHEL-8).</p> <p>So, in order to have a current PHP-8 version, you either compile your own PHP (discouraged and not the way to go here) or use some other source of RPMs, e.g. a third-party yum repository. Search the net to find a reliable source for PHP-RPMs for RHEL-7 and derivates like Rocky Linux (Hint: Ratatouille). Even when you do not need PHP 8 yet, but your app requires PHP 7.4, you will have to familiarize yourself with the concept of modularity.</p> <p></p> <p>Place the following script to <code>/var/www/html/index.php</code> and surf to https://localhost:8080. </p><pre><code>&lt;?php echo phpinfo();\n</code></pre><p></p> <p>Is it working? You should see the follwoing webpage:</p> Solution - Installing Apache and PHP <p>Please find my approach to the above tasks in the script provision_webserver.sh. Upon installation you should be able to load the page at the IP you defined in the Vagrantfile, in my case at http://192.168.33.10/. If you also forwarded the HTTP/HTTPS ports, then you can also load the same page at http://localhost:8080.</p>"},{"location":"courses/webappstack/#deploy-an-application","title":"Deploy an Application","text":"<p>For the last step, there's no receipt that works for every application. There are as many installation procedures as there are applications out there, but still they share some archetypes:</p> <ul> <li>Place the files to the DocumentRoot (of a VirtualServer directive), import the   database dump file</li> <li>Unpack the projecct files to the DocumentRoot and run an installer on the CLI</li> <li>Like above but run the installer by surfing to in the browser</li> <li>Run a command at the CLi to initiate a project and answer some questions</li> <li>and in between the example above every other possibility that one might imagine</li> </ul> <p>... in a nutshell</p> <p>Consult the manual and thoroughly follow it step by step.</p> <p>Final step</p> <p>Finally, when your application of choice is working, prove that it does. For a CMS consider adding the sentence \"Yes, I didi it\" to the frontpage using the backend editor. Send a screenshot by mail to me!</p>"},{"location":"courses/world_in_sql/","title":"The World in SQL","text":""},{"location":"courses/world_in_sql/#the-world-in-sql","title":"The World in SQL","text":"<p>There are many relational databases out there and all of them have the SQL - the Structured Query Language - in common though different dialects exist. Knowing SQL at least on a basic to intermediate level is beneficial for the every day life of an IT guy as you never know where you'll encounter it and it empowers you to use something better than Excel when solving a more complex task around data.</p> <p>The course here is a repetition of SQL. It's not meant to be the first introduction to SQL. You are also expected to be able to install a DB server and import an SQL file. If you are still a rookie, then you should follow a tutorial alongside to learn the stuff systematically.</p> <p>The course is built on exercises that get gradually more difficult. You are encouraged to solve the exercises by yourself! Believe me, the best way to learn SQL is by starting with basic queries and then add up the restrictions you have.</p> <p>While you build queries you might land in a dead end and you fiddle around and still can't get the right result. This is sometimes tedious but nevertheless you learn a lot along the way, at least a way not to do it! You then start a new approach to the question and try to make the query more complex again until you have the solution you want.</p> <p>If all fails, you can find the solutions at the end of the page. Keep in mind, three is often more than one solution.</p>"},{"location":"courses/world_in_sql/#preparations","title":"Preparations","text":"<p>Fetch the world database to the database server and import the schema and data. Just follow the guide provided by the fore-mentioned page. If you do not have an SQL server yet, you might want to follow the webappstack course or fetch a pre-built VM from the internet featuring MariaDB or any other relational database that speaks SQL.</p>"},{"location":"courses/world_in_sql/#journey-around-the-world","title":"Journey Around the World","text":""},{"location":"courses/world_in_sql/#understanding-the-database","title":"Understanding the Database","text":"<p>The data about our world is now store in a database. That makes it possible to use the SQL languages to query the data and therefore ask questions that we want answers for. To able to ask questions we first need to know what we can ask for.</p> <p>Exercise 1 - What do we know about the world?</p> <p>Try to answer the following questions:</p> <ul> <li>What tables do we have to select data from? What might be their role?</li> <li>Which data do we know about a single country?</li> <li>What do we know about a single city?</li> </ul> <p>Now that you have inspected the individual tables, it's time to investigate their relationships. From the real world we know that the world is composed from continents and the continents are divided in countries. Every country has population and the people live in cities of different sizes. Also people are talking different languages, sometimes more than one within the same country.</p> <p>Exercise 2 - Relationships and ERD</p> <p>Try to draw an ERD that shows all entities with some of their attributes especially those that are used to build relationships between the entities.</p> <p>Let's start our journey around the world by investigating some facts and getting the numbers. From counting simply counting countries to finding nifty facts. The possibilities are endless and you are invited to create further questions after you have solved all of mine. Talking about mine, the difficulty increased from question to question while new feature of SQL are gradually introduced.</p>"},{"location":"courses/world_in_sql/#basic-data-selection","title":"Basic Data Selection","text":"<p>Exercise 3 - Countries in the World</p> <ul> <li>Create a list of all countries and their country code.</li> <li>How many countries are known to the database.</li> <li>Which countries start with the letter M?</li> <li>What's the population of Switzerland?</li> </ul> <p>Aren't you surprised? Are there really only 7.1 millions of people in Switzerland. Shouldn't there be more than 8 millions already? Yes, the data we are dealing with is quite old! We will see this at other places too!</p> <p>Let's talk about continents and regions now. We know that there are the columns continent and region. That means, every country belongs to a region and a continent. Some countries are in the same region or on the same continent.</p> <p>Exercise 4 - Relationships, anyone? - an excursion</p> <p>Attribute continent as well as attribute region are modeled as columns here. Is this a good choice? Are there other, better possibilities to model these relationships? How would you model the relationships between continents, regions and countries? Draw a better ERD for these relationships.</p> <p>Now back to selecting data in our country table. As regions and continents are not normalized we have to select a little different and have to use special select flavors.</p> <p>Exercise 5 - From continents and regions</p> <ul> <li>Can you fetch a list of all continents and their regions ordered first by   continent and then by region?</li> <li>Can you fetch the list of countries that belong to Europe but not to the   following regions:<ul> <li>Western Europe</li> <li>British Islands</li> <li>Nordic Countries</li> </ul> </li> <li>How many of the above are known to the database?</li> </ul>"},{"location":"courses/world_in_sql/#hints-and-solutions","title":"Hints and Solutions","text":""},{"location":"courses/world_in_sql/#understanding-the-database_1","title":"Understanding the Database","text":"Hints ex 1 - What do we know about the world? <p>These questions can be answered using DESCRIBE statement, SHOW TABLES statement or SHOW COLUMNS statement. Then examine the output carefully and try to figure out what data is stored in these columns. Bonus question: What is the difference between the DESCRIBE and SHOW COLUMNS?</p> Solution <pre><code>USE world;\nSHOW TABLES;\nDESCRIBE country;\nDESCRIBE countrylanguage;\nDESCRIBE city;\nSHOW COLUMNS FROM city;\n</code></pre> Hints ex 2 - Relationships and ERD <p>An entity relationship diagram show things with the attributes and the relationships between the things. In our case we have the countries, cities that belong to countries and languages that are spoken in these countries. The cities are matched to their countries by the country code. The same goes for the languages. Therefore the countrycode is a foreign key of cities and languages to build a relationship to the countries.</p> <p>You can draw an ERD on paper or any tool you like. The following solution is done by using Mermaid.js that is thankfully already built-in in mkdocs-material.</p> Solution <pre><code>erDiagram\n    COUNTRY {\n        string Code PK \"The country code\"\n        string Name\n        enum Continent \"'Asia','Europe','North America','Africa','Oceania','Antarctica','South America'\"\n        string Region\n        decimal SurfaceArea\n    }\n    COUNTRY ||--o{ CITY : has\n    CITY {\n        int ID PK \"The primary Key\"\n        string Name\n        string CountryCode FK \"The country code\"\n        string District\n        int Population \"default: 0\"\n    }\n    COUNTRY ||--o{ COUNTRYLANGUAGE : has\n    COUNTRYLANGUAGE {\n        string CountryCode FK \"The country code\"\n        string\n        Language\n        enum IsOfficial \"T, F default: F\"\n        decimal Percentage\n    }</code></pre>"},{"location":"courses/world_in_sql/#basic-data-selection_1","title":"Basic Data Selection","text":"Hints ex 3 - Countries in the world <ul> <li>To answer the first exercise select only the columns name and country code</li> <li>For the second question you have to use the COUNT function.</li> <li>To answer the last question you have to narrow down the results using a WHERE clause with a LIKE operator</li> </ul> Solution <pre><code>SELECT Name, Code FROM country;\nSELECT count(Code) FROM country;\nSELECT Name FROM country WHERE Name like 'M%';\nSELECT Population FROM country WHERE Name = 'Switzerland';\n</code></pre> Hints ex 4 - Relationships, anyone? <p>Both attributes are not normalized, which means their string values occur multiple times in the column. When adding new country there's a chance for typos, i.e. 'Europe' instead of 'Europe' and this country would then not be on the content. Therefore we would normally normalize both to their own tables and add primary and foreign key to reference the data. Can you come up with a solution for a fully normalized country, region, continent relationship?</p> Solution <pre><code>erDiagram\n    CONTINENT {\n        int ID PK \"The identifier of the continent\"\n        string Name\n    }\n    CONTINENT ||--|{ REGION : divded_in\n    REGION {\n        int ID PK \"The identifier of the region\"\n        string Name\n        int Continent FK \"The identifier of the continent\"\n    }\n    COUNTRY {\n        string Code PK \"The country code\"\n        string Name\n        int Region FK \"The identifier to the Region\"\n    }\n    REGION ||--|{ COUNTRY : has\n</code></pre> Hints ex 5 - From continents and regions <p>If you use a standard SELECT statement, you will have way too many row in your output, namely one for each country. So there must be a way to sort out doubles to only have a distinct set of results. For the second and third question, there are many solutions. Try to find at least two. One of them should use the given regions and state that the countries should not be in these regions.</p> Solution <p> </p><pre><code>    SELECT DISTINCT Continent, Region FROM country ORDER BY Continent, Region;\n    SELECT Name, Region FROM country WHERE Continent='Europe' AND Region NOT IN ('Western Europe', 'British Islands', 'Nordic Countries');\n    a) SELECT count(Name) FROM country WHERE Continent='Europe' AND Region NOT IN ('Western Europe', 'British Islands', 'Nordic Countries');\n    b) SELECT count(Name) FROM country WHERE Continent='Europe' AND (Region = 'Baltic Countries' OR Region = 'Southern Europe' OR Region = 'Eastern Europe');\n</code></pre> <p></p> <p>The WHERE clause \"Continent='Europe'\" is not necessary as the selected regions are in Europe anyway. The above two queries only lead to the same result if there are no countries not belonging to these regions in both queries.</p> Hints ex X Solution <pre><code>\n</code></pre>"},{"location":"gitandco/git/","title":"Learning Git","text":""},{"location":"gitandco/git/#git","title":"Git","text":""},{"location":"gitandco/git/#learning-git","title":"Learning Git","text":"<p>The following three videos by David Mahler are a decent introduction to Git version control system and teach you the key concepts of Git in a illustrative way. Runtime is 30m each for a total of 1.5h. I wish I started to learn Git this way back then. </p> <p> </p> <p>In addition, the below book, the visual overview of the most used Git commands and lastly the visual playground below are helpful too. And.. Git's very good documentation as the one source of truth as reference.</p> <ul> <li>Git Reference</li> <li>Pro Git Book</li> <li>A Visual Git Reference</li> <li>An interactive Git course</li> <li>Visualizing Git</li> </ul>"},{"location":"gitandco/git/#areas-in-a-git-repository","title":"Areas in a Git Repository","text":"<p>This diagram illustrates the different areas in a git repo and which subcommands to use to manage changes between these buckets:</p> <p></p>"},{"location":"gitandco/git/#configuration-files","title":"Configuration files","text":"<p>There are a number of configuration files that git offers and that let user customize their git experience in great depth. As usual great powers comes with great responsibility.  Not all configuration files and options are mentioned here, there are many more.</p>"},{"location":"gitandco/git/#first-time-git-setup","title":"First Time Git setup","text":"<p>This step is really important as you set some default behaviour and especially you have to set your identity! This last step - configuring your identity - is neglected very often. Please, don't. Now go and read first time git setup!</p> <p>Keep in mind that you just set your global identity. Almost every configuration key is also changeable on repo level. This means while your global identity may be \"MrCool cool@test.com\", you can still have another identity on a per repo basis, i.e. when implementing stuff for work. You can set your identity within the repo directory by issuing:</p> <pre><code>git config user.name  \"Max Mustermann\"\ngit config user.email max.mustermann@example.com\n</code></pre> <p>As you can see, the same command is run, but <code>--global</code> is left out. Now this local setting can be found in the config file of the repo, <code>.git/config</code>. While the global configuration file is found at <code>~/.gitconfig</code>.</p> <p>Unsure what your identity is in the current repo? Just run <code>git config user.name</code> or <code>git config user.email</code> respectively.</p>"},{"location":"gitandco/git/#repo-local-configuration-files","title":"Repo-local Configuration Files","text":""},{"location":"gitandco/git/#gitignore-specifies-intentionally-untracked-files-to-ignore","title":"<code>.gitignore</code> - Specifies intentionally untracked files to ignore","text":"<p>A gitignore file specifies intentionally untracked files that Git should ignore, see man gitignore or in the git-book. This is valuable if you have some local temporary files, that should not get committed except if forced. Other examples may include a vendor library that is used that is versioned somewhere else and gets installed as a dependency.</p>"},{"location":"gitandco/git/#gitattributes-defining-attributes-per-path","title":"<code>.gitattributes</code> - Defining attributes per path","text":"<p>A gitattributes file is a simple text file that gives attributes to pathnames, i.e. end of line style, see man gitattributes or in the git-book.</p>"},{"location":"gitandco/git/#articles","title":"Articles","text":""},{"location":"gitandco/git/#the-thing-about-git-15-read","title":"The Thing About Git (15' read)","text":"<p>Often beginners find it oddly strange that there is an index/staging area in Git and are not aware for what this thing can be used. Other VCS do not have this. Nevertheless it's not an addition just to make Git more complicated and to bother the developers. The \"Tangled Working Copy Problem\" illustrates why this concept makes sense and how you should use it to your favor. There's one important option tot <code>git add</code> that most beginners overlook (and tutorials almost never teach you), e.g. <code>--patch</code> or <code>-p</code></p> <p>Try the following form of adding files to the index next you have to do that and see what happens! <code>git add --patch somepathspec</code> or <code>git add -p somepathspec</code></p>"},{"location":"gitandco/github/","title":"Github","text":""},{"location":"gitandco/github/#github","title":"GitHub","text":"<p>GitHub is a service to host repositories and provides a lot of features/utilities around this task. There are many others but GitHub is the oldest and probably most used. GitHub provides extensive documentation and (video) guides, so in order to honor the DRY principle, only little text is found here but instead a list of deep links to chapters and other learning resources is provided here:</p> <ul> <li>Training guides on GitHub and Git</li> <li>Video Guides on various topics</li> <li>Create, cloning and archiving of repositories</li> <li>Committing changes to your project</li> <li>Collaborating with pull requests / proposing changes to your work with PRs</li> <li>Proposing changes to your work with pull requests</li> <li>Using the power of GitHub on the CLI</li> <li>GitHub Training Lab</li> <li>Visualizing Git</li> </ul>"},{"location":"gitandco/github/#github-flow","title":"GitHub flow","text":"<p>While there are many git workflows out there, having your repository on GitHub make the GitHub Flow your first choice. As explained on the git workflows page, it's simple even for bigger teams. The documentation on the Github flow primarily explains it from technical point of view. The follow section workflow embeds these steps in an example change.</p>"},{"location":"gitandco/github/#complete-workflow","title":"Complete Workflow","text":"<p>My philosophy is that every change should be documented from the beginning to the end when it's implemented. A change could be a bug and its fix or a new feature that is required and gets implemented. The order of action then is:</p> <pre><code>sequenceDiagram\n    autonumber\n    participant L as LocalRepo\n    participant G as GitHub (GH)\n    L-&gt;&gt;G: Create an issue (bug, feature, ...)\n    activate L\n    L-&gt;&gt;L: Create a feature branch (FB)\n    loop work_on_issue\n        L-&gt;&gt;L: Change code and create a commit\n        L--&gt;&gt;G: (optionally) Push FB to GH\n    end\n    Note right of L: When work is finally done\n    L-&gt;&gt;L: Cleanup your FB\n    L-&gt;&gt;G: Push FB to GH\n    deactivate L\n    activate G\n    G-&gt;&gt;G: Create a pull request (PR)\n    G-&gt;&gt;G: (ideally): Let somebody review your PR\n    G-&gt;&gt;G: Merge PR\n    deactivate G\n    activate L\n    G-&gt;&gt;L: Pull latest changes on main\n    L-&gt;&gt;L: Delete local FB\n    L-&gt;&gt;G: Delete remote FB\n    deactivate L</code></pre>"},{"location":"gitandco/github/#comments-on-above-diagram","title":"Comments on above diagram","text":"<p>1) Describe the bug/feature in several dimensions to make it possible to understand the need to change something. Key questions are:</p> <ul> <li>What is broken?</li> <li>How does the error present itself?</li> <li>What are error messages that occur?</li> <li>What feature is missing?</li> <li>Which are the requirements that make the changes necessary?</li> </ul> <p>2) Name the branch accordingly i.e. <code>issue31</code>, <code>featureXY</code>, ... 5) Cleanup the branch if needed by rewording, squashing, rearranging commits    using  <code>git rebase --interactive</code> in order to have a history that makes    sense. 12) Get yourself a  or move to the next ticket</p>"},{"location":"gitandco/github/#github-actions","title":"GitHub Actions","text":"<p>Except for the following deep links into the official documentation, no other information is available here as of yet.</p> <ul> <li>Using workflows</li> <li>Workflow Syntax for GitHub Actions</li> <li>Supported platforms for action runners</li> </ul>"},{"location":"gitandco/github/#github-on-the-cli","title":"GitHub on the CLI","text":"<p>There is a wonderful, official tool written in Go that let's you do all the GitHub related work on your CLI without the need to go to the browser. No need to switch app, enter URLs, click through to the destination page you need, just to open a new PR. All can be done in your Bash. See it in action.</p> <p>The above illustrated workflow done using the tool <code>gh</code> might look as follos:</p> <pre><code>gh issue create --title \"Thing X fails to compile\" --assignee \"@me\" --label \"bug\" \\\n                --body \"some longer text to sufficiently describe the bug\"\ngh checkout main\ngh checkout -b bug_compile_error_in_X\n# work on file\ngit add fileX\ngit ci -m \"Fix compilation error\"\ngit push origin bug_compile_error_in_X\ngh pr create -t \"The bug is fixed\" -b \"Everything works again\"\ngh pr merge\ngit checkout main\ngit pull origin main\ngit branch -d bug_compile_error_in_X\n</code></pre> <p><code>gh</code> comes with an excellent documentation and local help, see <code>gh --help</code>.</p>"},{"location":"gitandco/github/#community-health-files","title":"Community Health Files","text":"<p>TBD</p>"},{"location":"gitandco/gitrecipes/","title":"Git Recipes","text":""},{"location":"gitandco/gitrecipes/#git-recipes","title":"Git Recipes","text":""},{"location":"gitandco/gitrecipes/#my-commit-messages-suck","title":"My commit messages suck","text":"<p>Symptom</p> <p>My colleagues and friends are notoriously complaining about my git commit messages. But not only that, they also say that my commits suck pretty often. My commits seem not to be atomic, include whitespace changes or include too much stuff... but, what is a good commit with an equally good commit message anyway?</p> <p>Discussion and Solution</p> <p>These topics have been discussed a lot and there thankfully is some common sense about these issues and good write-ups have been done, well worth reading:</p> <ul> <li>cbeams excellent How to Write a Git Commit Message   aka The seven rules of a great Git commit message</li> <li>Tim Pope's Note About Git Commit Messages</li> <li>ProGit Book on Contributing and Commit Guidelines</li> <li>Peter Hutterer's Blog Post On commit messages   with how and how not to do git. Especially   read the \"How not to do it\" section!</li> </ul>"},{"location":"gitandco/gitrecipes/#git-push-rejected-due-to-remote-changes","title":"<code>git push</code> rejected due to remote changes","text":"<p>Symptom</p> <p>I have committed something (to the main branch) and forgot to pull first. Now I can't push anymore as git rejects the push with the following message:</p> <p>git push rejected</p> <p></p> <p>Discussion and Solution</p> <p>This usually means that somebody else already added a new commit and pushed to GitHub and now your commit conflicts with the other. What to do now? You would need to:</p> <ul> <li>Remove your commit(s) and keep the changes</li> <li>Run a <code>git pull --ff-only</code> to fetch the new commit from the other person</li> <li>Re-apply your changes again on top of the latest commit</li> </ul> <p>Solution</p> <p><code>git pull --rebase</code></p> <p>This command first fetches the latest commits and then rebases your commits on top of the latest commit, see <code>git help pull</code>. Now you may try to push your changes.</p>"},{"location":"gitandco/gitrecipes/#damn-i-committed-a-secret","title":"Damn, I committed a secret!","text":"<p>Symptom</p> <p>You just committed a configuration file with a password in it? You entered a real password into a file instead of a dummy password like <code>123456</code> and committed it? You added disclosed something else by committing it to the repo? Fear not and read ahead!</p> <p>Discussion and Solution</p> <p>There's good cheat sheet from GitGuardian that features a flow chart on how to proceed and save the situation depending on the stage at which you realised that something wrong happened.</p> <p>In addition, go and study the page \"Removig sensitive data from a repository\" in the GitHub Documenation.</p>"},{"location":"gitandco/gitrecipes/#damn-i-branched-off-wrong-parent-branch","title":"Damn, I branched off wrong parent branch!","text":"<p>Symptom</p> <p>You created a new feature branch and after some commits you realized that you branched off a feature branch instead of the master/main branch?</p> <p>The situation now looks like this, right?</p> <pre><code>A---B---C---D  main\n    \\\n      E---F---G  other-feature-branch\n              \\\n                H---I---J new-feature-branch (HEAD)\n</code></pre> <p>Discussion and Solution</p> <p>Well, you could create a new branch off main and then <code>git cherry-pick</code> all commits over, which would work, but implies additional work, i.e. if you already have setup a pull request and someone already reviewed the code as you would setup a new branch and therefore also a new PR and the review would have to be done again...</p> <p>But we can use git rebase --onto command. It can do exactly what we need. Replace the old parent branch with new parent branch. In our case with main branch. For the situation above, we would like to achieve this result:</p> <pre><code>A---B---C---D  main\n            |\\\n            | E---F---G  other-feature-branch\n            |\n             \\\n              H'---I'---J' new-feature-branch (HEAD)\n</code></pre> <p>To replace parent branch with master, we need to be on new-feature-branch branch and do:</p> <p><code>git rebase --onto main other-feature-branch</code></p> <p>That\u2019s it. Right now we have our current-feature-branch branch based on master branch, not like before based on feature-branch.</p> <p>In the end, I would like to say two more things here. First, the general form - rebase some branch from one branch onto another - looks like this:</p> <p>Solution</p> <pre><code>git checkout branch2move\ngit rebase --onto new-parent old-parent\n</code></pre> <p>The destination branch comes first follow by the old branch. The branch that is moved is the currently checked out!</p> <p>Second, as you see one schema above, after using <code>git rebase --onto</code> we don\u2019t have exactly the same commit like before. Code is the same, but the SHA number (you know the commit identifier, for example 2d4698b) for each commit is different. Everything will be fine, when you work alone on the branch where you want to do the trick. In case other people also work on this branch this command can provide problems as always when you rewrite history and change commit hashes.</p> <p>More on <code>git rebase --onto</code> can be found in Git rebase --onto an overview</p>"},{"location":"gitandco/gitrecipes/#extract-a-subfolder-to-its-own-repository","title":"Extract a Subfolder to Its Own Repository","text":"<p>Symptom</p> <p>Sometimes you come to a point where a certain bit of your code grows that much that you want it to manage in its own repository. Some common use cases might include:</p> <ul> <li>A Submodule should now be its own library/plugin</li> <li>Puppet code deserves its own module</li> <li>An ansible playbook should be turned into its own role</li> </ul> <p>You might say: \"Well, create new repo, move the files over, check them in and do the first commit. Done. Where's the problem?\" What if I tell you, that moving only the files is not enough. I'd want to also move the history of those files. I want all the old commits where these files were referenced in the new repo too!</p> <p>Solution</p> <p>It turns out that this is such a common and useful practice that the overlords of Git made it really easy. The magic command is <code>git subtree split</code></p> <ol> <li> <p>Prepare the old repo from where you want extract the subfolder, in this    example the folder <code>lib/myparser</code>:</p> <pre><code>cd path/to/bigrepo\ngit subtree split -P lib/myparser -b myparser-only\n</code></pre> <p>I now have a new branch <code>myparser-only</code> in the bigrepo, that exactly contains to contents and its histroy of this very folder. Yeah! Now let's create a now repo from that branch:</p> </li> <li> <p>Create the new repo and pull the prepared branch:         </p><pre><code>mkdir path/to/myparser; cd path/to/myparser\ngit init\ngit pull path/to/bigrepo myparser-only\n</code></pre>     The history has now been pull into the new repo.<p></p> </li> <li> <p>Time to attach the remote (already created at GH) and push:         </p><pre><code>git remote add origin https://github.com/user/myparser\ngit push -u origin main\n</code></pre><p></p> </li> <li> <p>Cleanup inside the bigrepo and remove the extracted stuff:         </p><pre><code>cd path/to/bigrepo\ngit branch -D myparser-only\ngit rm -rf lib/myparser\ngit ci -m \"Extraced myparser to its own repo\"\ngit push origin main\n</code></pre>     You're done. Original source<p></p> </li> </ol>"},{"location":"gitandco/gitrecipes/#import-a-repository-into-a-subfolder-of-another-repository","title":"Import a Repository (Into a Subfolder of) Another Repository","text":"<p>Symptom</p> <p>You have a lot of repositories that you often deploy together or changes to one directory almost always require changes to another repo? Then it might be beneficial to import one repository into the other.</p> <p>Discussion and Solution</p> <p>Again, it turns out that also this use case is quite easy to achieve with a simple merge after adding the to be included repository as a remote and then fetching the branch to merge. Cleanup the branch before and then merge. The whole history is imported.</p> <p>Solution</p> <p>If you want to merge the main branch of project-a into HEAD of project-b:</p> <pre><code>cd path/to/project-b\ngit remote add project-a /path/to/project-a\ngit fetch project-a --tags\ngit merge --allow-unrelated-histories project-a/main # or whichever branch you want to merge\ngit remote remove project-a\n</code></pre> <p>In case you want to put project-a into a subdirectory, you can use <code>git-filter-repo</code> (filter-branch is discouraged). Run the following commands before the commands above:</p> <pre><code>cd path/to/project-a\n# Optionally checkout a new branch and make changes if needed\n# The use filter-repo as advised:\ngit filter-repo --to-subdirectory-filter project-a\n</code></pre> <p>Now is also a good moment to clenaup the history of the branch you want to import.</p>"},{"location":"gitandco/gitworkflows/","title":"Git Workflows","text":""},{"location":"gitandco/gitworkflows/#git-workflows","title":"Git Workflows","text":"<p>While Git is the tool of choice to version any kind of text files, it is only doing exactly that. It makes now assumption about how people work together. Coming up with a decent workflow is up to the user working with the tool Git.</p>"},{"location":"gitandco/gitworkflows/#a-successful-git-branching-model-20-read","title":"A successful Git branching model (20' read)","text":"<p>This article is the original article from 2010 that introduced/presented the Git-flow workflow for managing the code for software projects. It was the first workflow that was widely adopted and got \"famous\". The articles demonstrates a lot of brain work done about handling different situations and how to solve issues. But also read the author's reflection at the top! While this is a proven Git branching strategy it is quite complex and for many situations and projects a complete overkill. Keep in mind to use a workflow that is as simple as possible. Do not overly complicate collaboration if it's not needed. The git-flow workflow is very powerful but comes with a certain complexity and therefore too much of a hassle for most projects we do. For these projects the GitHub flow is much more reasonable and by far easier to understand and live.</p> <p>There is a good comparison of git branching strategies over at flaghsip.io. You should at least know the principles, pros/cons and differences between these four strategies.</p> <p>Make yourself familiar with other Git branching strategies like the ones in the following list and then choose the simplest that is still satisfying your real needs (not the nice to haves). Also use something that others in your team are already familiar and successful with!</p>"},{"location":"gitandco/gitworkflows/#list-of-popular-git-workflows","title":"List of popular Git workflows","text":"<ul> <li>GitHub flow Discussion and Documentation</li> <li>GitLab Flow</li> <li>git-flow</li> <li>Git workflow using rebase</li> </ul> <p>When working in teams there are many possible workflows to work on a project all at the same minimizing the changes of conflicts. Hosting the repo at GitHub however should motivate you to incorporate the GitHub flow as it has proven to be a very easy workflow that a whole lot of projects are using. Take a look into guide on GitHub flow.</p>"},{"location":"guides/ansible/","title":"Ansible","text":""},{"location":"guides/ansible/#ansible","title":"Ansible","text":""},{"location":"guides/ansible/#articles","title":"Articles","text":"<ul> <li>Using DNS as an Ansible dynamic Inventory</li> <li>Checking Controlling Task Execution, Orchestration and Scope</li> </ul>"},{"location":"guides/ansible/#recipes","title":"Recipes","text":""},{"location":"guides/ansible/#check-if-a-line-is-present-in-a-file","title":"Check if a line is present in a file","text":"<p>Use this recipe in a molecule verify playbook to check if a certain line is present or absent in a file. Keep <code>state:absent</code> and work with the <code>failed_when</code> option using a <code>not</code>, when the should not be present.</p> <pre><code>- name: \"Ensure /tmp/my.conf contains 127.0.0.1\"\n  ansible.builtin.lineinfile:\n    path: /tmp/my.conf\n    regexp: '^127\\.0\\.0\\.1.*whatever'\n    state: absent\n  check_mode: yes\n  register: out\n  changed_when: false\n  # failed_when: not out.found\n\n- debug:\n    msg: \"Yes, line exists.\"\n  when: out.found\n\n- debug:\n    msg: \"Line does NOT exist.\"\n  when: not out.found\n</code></pre> <p>See this stackoverflow post for a discussion.</p>"},{"location":"guides/certificates/","title":"Certificates with OpenSSL","text":""},{"location":"guides/certificates/#certificates-with-openssl","title":"Certificates with OpenSSL","text":""},{"location":"guides/certificates/#private-keys","title":"Private Keys","text":""},{"location":"guides/certificates/#create-a-private-key","title":"Create a Private Key","text":"<p>The following command creates a private key <code>domain.key</code> with a key length of 4096 bits. The key gets Triple-DES encrypted.</p> <pre><code>openssl genrsa -des3 -out domain.key 4096\n</code></pre>"},{"location":"guides/certificates/#verify-a-private-key","title":"Verify a Private Key","text":"<p>To check if a private key is valid, use the following command:</p> <pre><code>openssl rsa -check -in domain.key\n</code></pre>"},{"location":"guides/certificates/#verify-a-private-key-matches-a-certificate-and-csr","title":"Verify a Private Key Matches a Certificate and CSR","text":"<p>Get the MD5 sum for the private, the certificate and the CSR with the following commands:</p> <pre><code>openssl rsa -noout -modulus -in domain.key | openssl md5\nopenssl x509 -noout -modulus -in domain.crt | openssl md5\nopenssl req -noout -modulus -in domain.csr | openssl md5\n</code></pre> <p>If all three commands output the same MD5 sum, there is a high probability that the private key, the certificate and the CSR match together.</p>"},{"location":"guides/certificates/#encrypt-a-private-key","title":"Encrypt a Private Key","text":"<p>Encrypt a previously unencrypted private key:</p> <pre><code>openssl rsa -des3 -in unencrypted.key -out encrypted.key\n</code></pre> <p>Enter a desired pass phrase, to encrypt the key with.</p>"},{"location":"guides/certificates/#decrypt-a-private-key","title":"Decrypt a Private Key","text":"<p>Decrypt a previously encrypted private key:</p> <pre><code>openssl rsa -in encrypted.key -out unencrypted.key\n</code></pre> <p>Enter the passphrase use to encrypt the pass phrase.</p>"},{"location":"guides/certificates/#further-reading","title":"Further Reading","text":"<ul> <li>OpenSSL Essentials over at DigitalOcean</li> </ul>"},{"location":"guides/homebrew/","title":"Homebrew","text":""},{"location":"guides/homebrew/#homebrew","title":"Homebrew","text":""},{"location":"guides/homebrew/#installing-homebrew","title":"Installing Homebrew","text":"<p>Higher privileges needed when installing Homebrew</p> <p>Installing Homebrew itself does need root privileges to be able to create certain directories and change their ownership. Later, when installing bottles, root privileges are not required anymore except for casks that get installed to <code>/Applications</code>. Therefore your macOS user account need to be able to adminster the computer.</p> <p>Installing Homebrew is pretty easy by just running the installer. The Homebrew site illustrates this well:</p> macOSLinux <p>The Xcode Command Line Tools are required to install software with Homebrew. You can install these beforehand or let Homebrew ask you to do so. In any case use the command <code>xcode-select --install</code> to install these.</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>On Linux the installation of the requirements works quite differently. Find more details in the documentation of Homebrew On Linux.</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre>"},{"location":"guides/homebrew/#using-homebrew","title":"Using Homebrew","text":"<p>The help command shows us the most used commands:</p> <pre><code>$ brew --help\nExample usage:\n  brew search TEXT|/REGEX/\n  brew info [FORMULA|CASK...]\n  brew install FORMULA|CASK...\n  brew update\n  brew upgrade [FORMULA|CASK...]\n  brew uninstall FORMULA|CASK...\n  brew list [FORMULA|CASK...]\n\nTroubleshooting:\n  brew config\n  brew doctor\n  brew install --verbose --debug FORMULA|CASK\n\nContributing:\n  brew create URL [--no-fetch]\n  brew edit [FORMULA|CASK...]\n\nFurther help:\n  brew commands\n  brew help [COMMAND]\n  man brew\n  https://docs.brew.sh\n</code></pre> <p>man brew</p> <p>The manpage of the Homebrew is really a good read especially for terminology and details, see <code>man brew</code>!</p>"},{"location":"guides/homebrew/#updating-homebrew","title":"Updating Homebrew","text":"<p>Warning</p> <p>Do not confuse the commands update and upgrade!</p> <p>The command <code>brew update</code> will update Homebrew itself and this in principle means the <code>brew</code> command and the local working copy of the repository that holds the formulae (a <code>git pull --ff-only</code> is done). After that command your Homebrew knows the latest version of all formulae and can tell you those that are newer as what you have installed. The installed software itself is not updated.</p>"},{"location":"guides/homebrew/#installing-software","title":"Installing software","text":"<p>The command <code>brew install</code> will install a software aka formula and all of its dependencies, i.e <code>brew install wget</code>.</p> <p>There are so called taps, which stands for repositories containg formulae that install software. By default the taps <code>homebrew-core</code> and <code>homebrew-cask</code> are already known and formulae can easily be installed using <code>brew install FORMULAE</code>.</p> <ul> <li><code>homebrew-core</code> contains formulae for software that gets bottled (compiled) and   distributed</li> <li><code>homebrew-cask</code> contains forumlae for software that is already compiled by the   upstream vendor, i.e. google-chrome, firefox.</li> </ul> <p>One can create its own tap. As an example puppetlabs has its own tap to distribute puppet, pdk and the like, which means one can tap their tap and install the software using homebrew though it's not contained in default Homebrew:</p> <pre><code>brew tap puppetlabs/puppet\nbrew install pdk\n</code></pre>"},{"location":"guides/homebrew/#brew-bundle","title":"<code>brew bundle</code>","text":"<p>Manually installing software may be useful on a one by one basis. But imagine installing all your software after reinstalling your operating system? Do you even remember what you had/need? Would it be easier to have a list of stuff you need, that is even versioned? Reinstalling the machine? Easy, reinstall, clone your repo and run <code>brew bundle --file Brewfile</code>. <code>Brewfile</code> is an arbitrary text file with content that my look like this:</p> <pre><code>tap \"pubppetlabs/puppet\"\nbrew \"findutils\"\nbrew \"wget\"\ncask \"firefox\"\nmas 'Remote Desktop', id: 409907375\n</code></pre> <p>The keywords denote how the packages get installed:</p> line in Brewfile Command run tap \"pubppetlabs/puppet\" brew tap puppetlabs/puppet brew \"findutils\" brew install findutils cask \"firefox\" brew install --cask firefox mas 'Remote Desktop', id: 409907375 mas install 409907375 <p>This file can be created from what you currently have using <code>brew bundle dump --file Brewfile</code>.</p> <p>See the <code>brew bundle</code> section of the <code>brew man</code> output or <code>brew bundle --help</code> or homebrew-bundle for more details. See mas-cli for the documentation of the mas cli tool.</p>"},{"location":"guides/homebrew/#upgrading-installed-software","title":"Upgrading installed software","text":"<p>Homebrew formulae get frequently updated as their maintainers take care of \"their formulae\". This means whenever a certain software is updated, so is the forumlae. Upgrading the wget package we just installed is done by running the command <code>brew upgrade wget</code>. To upgrade all software that we have so far, just run <code>brew upgrade</code>. Curious beforehand what would be updated? Just run <code>brew outdated</code> to see the list of available upgrades.</p>"},{"location":"guides/homebrew/#cleanup-the-cellar","title":"Cleanup the cellar","text":"<p>When upgrade your installed software, Homebrew will keep old versions and the downloaded packages (tar.gz, dmgs, ...). To get rid of this old stuff you may run <code>brew cleanup</code>.</p>"},{"location":"guides/homebrew/#further-stuff","title":"Further Stuff","text":""},{"location":"guides/homebrew/#scripts","title":"Scripts","text":"<p>The following script summarizes most of the above tasks into a single script/function. It will update Homebrew, then check if new version of installed formulae is available and ask if you upgrade should be carried out. In any case a cleanup run ends the script. Either add it to its own file, make it executable and put it somewhere in the path, i.e. ~/bin or define as function in your ~/.bash_profile.</p> <pre><code>#!/usr/bin/env bash\n\nblue=$(tput setaf 33)\nred=$(tput setaf 124)\nreset=$(tput sgr0)\n\nfunction prompt_confirm\n{\n    while true; do\n        printf \"\\r[ ${yellow}??${reset} ] ${1:-Continue?} [y/n]: \";\n        read -r -n 1 REPLY;\n        case $REPLY in\n            [yY])\n                echo;\n                return 0\n            ;;\n            [nN])\n                echo;\n                return 1\n            ;;\n            *)\n                printf \" ${red} %s \\n${reset}\" \"invalid input\"\n            ;;\n        esac;\n    done\n}\n\necho \"[ ${blue}..${reset} ] Updating Homebrew\";\nbrew update;\nout=$(brew outdated);\nif [ ! -z \"${out}\" ]; then\n    echo \"[ ${blue}..${reset} ] The following updates are available:\";\n    echo $out;\n    if [ \"${1}\" = \"-f\" ] || prompt_confirm \"Shall I upgrade all?\"; then\n        brew upgrade;\n        brew cleanup;\n    fi;\nfi;\necho \"[ ${blue}..${reset} ] Running brew doctor\";\nbrew doctor\n</code></pre>"},{"location":"guides/macos_faq/","title":"macOS FAQs","text":""},{"location":"guides/macos_faq/#macos-frequently-asked-questions","title":"macOS Frequently Asked Questions","text":""},{"location":"guides/macos_faq/#how-do-i-find-out-the-bundle-id-of-an-application","title":"How do I find out the Bundle ID of an Application?","text":"<p>Run the following snippet of Applescript with the exact name of the Application in question, i.e. \"Alfred 5\" or \"TextMate\"</p> <pre><code>$ osascript -e 'id of app \"Music\"'\ncom.apple.Mail\n</code></pre>"},{"location":"guides/macos_faq/#how-do-i-reset-macos-permission-for-an-application","title":"How do I reset macOS permission for an Application?","text":"<p>Launch Terminal and quit the app in question, i.e. Alfred. Paste the following command in Termin and press Return.</p> <pre><code>tccutil reset All com.runningwithcrayons.Alfred\n</code></pre>"},{"location":"guides/macos_faq/#how-can-i-get-rid-of-comappleprovenance","title":"How can I get rid of com.apple.provenance","text":"<p>Actually it's easy, not even sudo necessary! Just issue the following command for current working directory recursively down:</p> <pre><code>xattr -rd com.apple.provenance\n</code></pre> <p>BUT: This does only work in Termianl.app! Not in iTerm2, not in Wezterm, not in $you-name-it&gt;. Just! In! Terminal.app! Weird, isn't it?</p> <p>By the way, <code>com.apple.provenance</code> is a new extended attribute mark files that where quarantined but you choose to allowlist them. So this marks them has having been quarantined. It has been introduced with Ventura.</p>"},{"location":"guides/miniconda/","title":"Miniconda","text":""},{"location":"guides/miniconda/#miniconda","title":"Miniconda","text":"<p>The fastest way to obtain conda is to install Miniconda, a mini version of Anaconda that includes only conda and its dependencies. If you prefer to have conda plus over 7,500 open-source packages, install Anaconda.</p>"},{"location":"guides/miniconda/#installation","title":"Installation","text":"macOS (Homebrew)macOS (Installer Script)Linux (Installer Script <p>On macOS it's easiest to use Homebrew for the task:     </p><pre><code>brew install miniconda\n</code></pre><p></p> <p>See project documentaiton for the installer script.</p> <p>See project documentaiton</p>"},{"location":"guides/miniconda/#managing-environments","title":"Managing Environments","text":""},{"location":"guides/miniconda/#create-an-environment","title":"Create an environment","text":"<p>The following two tabs illustrate how to create an environment and install packages manually with several commands while the other shows how to build an environment based on specifications found in a YAML file.</p> manuallyfrom file <pre><code># Create conda environment and activate it\nconda create --name myenv\nconda activate myenv\n# Install latest Python 3.9.x\nconda install python=3.9\n# Install some package and its depepdencies\npip install mkdocs-material\n</code></pre> <pre><code># Create a yaml file specifiying the details of the env to create\ncat &lt;&lt;EOD &gt;~/environment.yml\nname: myenv\ndependencies:\n  - python=3.9\n  - pip:\n      - mkdocs-material\nEOD\n# the -f option can even be ommitted if the environment file is named\n# environment.yaml and is found within current workig directory\nconda env create [-f environment.yml]\n</code></pre> <p>Add environment.yml to git repo</p> <p>When having a python environemnt for project, it's good practice to have the specification in a file <code>environment.yml</code> toplevel in the git repo of the project. Like this, you document what needs to be install and you (and your contributors) can fire up the evironment by just cloning the repo and running <code>conda create</code> within the toplevel directory. Done.</p>"},{"location":"guides/miniconda/#managing-environments_1","title":"Managing environments","text":"<p>Further commands regarding the management of environments outlined in the documentation in good details. Have a look there!</p>"},{"location":"guides/misc/","title":"Miscellaneous","text":""},{"location":"guides/misc/#miscellaneous-interesting-stuff","title":"Miscellaneous Interesting Stuff","text":"<p>Please find here preserved knowledge that does not (yet) deserves its own page or is interdisciplanry so that it would fit in more that one place. This includes topics like...</p>"},{"location":"guides/misc/#charsets","title":"Charsets","text":"<p>The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</p> <p>Charset and Collation Recommendation for MySQL/MariaDB</p> <pre><code>[client]\ndefault-character-set = utf8mb4\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqld]\ncharacter-set-client-handshake = FALSE\ncollation-server = utf8mb4_unicode_ci\ninit-connect = 'SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci'\ncharacter-set-server = utf8mb4\n</code></pre> <p>Further Reading / Sources:</p> <ul> <li>utf8 vs. utf8mb4</li> <li>MariaDB KB article on Setting Character Sets and Collactions</li> <li>https://medium.com/@adamhooper/in-mysql-never-use-utf8-use-utf8mb4-11761243e434</li> <li>https://stackoverflow.com/questions/47566730/force-mariadb-clients-to-use-utf8mb4</li> <li>How to support full Unicode in MySQL databases by Mathias Bynens</li> </ul>"},{"location":"guides/misc/#openssh-proxyjump-and-proxycommand","title":"OpenSSH ProxyJump and ProxyCommand","text":"<p>ProxyJump is available since OpenSSH version 7.5. ProxyCommand somewhat longer. The following examples both establish a connection to the remote server by using a jump server as a proxy server in between.</p> <pre><code>ssh -J user@&lt;jump server&gt; &lt;remote-server&gt;\n\nssh -o ProxyCommand=\"ssh -W %h:%p &lt;jump server&gt;\" &lt;remote-server&gt;\n</code></pre> <p>The ProxyJump even provides fallback:</p> <pre><code>ssh -J &lt;jump server1&gt;,&lt;jump server2&gt;,&lt;jump server3&gt; &lt;remote-server&gt;\n</code></pre> <p>You can put this config into your <code>~/.ssh/config</code> file:</p> <pre><code>Host remoteserver\n  HostName demo.test.com\n  User dev\n  IdentityFile ~/.ssh/id_rs\n  Port 2048\n\n  ## sample for ProxyJump\n  ProxyJump user@jump.test.com\n\n  ## sample for ProxyCommand\n  ProxyCommand ssh -W %h:%p user@jump.test.com\n</code></pre> <p>See How to Use SSH ProxyJump and SSH ProxyCommand for more details.</p>"},{"location":"guides/mkdocs/","title":"MkDocs","text":""},{"location":"guides/mkdocs/#mkdocs-material-for-mkdocs","title":"MkDocs | Material for MkDocs","text":""},{"location":"guides/mkdocs/#installation","title":"Installation","text":"<p>There are many possible ways to install the tool and its dependencies, see the getting started guide of material-mkdocs. The description below illustrates the conda environemnt way to go.</p> Conda environment using pip <pre><code># Create conda environment and activate it\nconda create --name myenv\nconda activate myenv\n# Install latest Python 3.9.x\nconda install python=3.9\n# Install material-mkdocs and its dependencies, see output\npip install mkdocs-material\n</code></pre> <p>Info</p> <p>The above also install MkDocs and the python markdown extension (pymdown-extensions)</p>"},{"location":"guides/mkdocs/#setup-a-project","title":"Setup a project","text":"<p>Now its time to fire up a new projecct using `mkdocs:</p> <pre><code>mkdir myproject\ncd myproject\n# It's probably wise to version it\ngit init\necho \"site/\" &gt; .gitignore\n# Do more git stuff here or later\n#\n# Now initialize a mkdocs project\n# and add the files to the git index\nmkdocs new .\ngit add .\ngit ci -m \"Initial empty mkdocs project\"\n</code></pre> <p>The journey just started, best to continue the getting started guide of the material-mkdocs website.</p> <p>The reference guide of material-mkdocs is a superb place to get an overview of possible style elements like admonitions, lists, formatting etc. and how to achieve them. Also look into the cheatsheet with all stuff in aciton.</p> <p>To publish the generated static pages, either deploy manually or setup a github action. This is on page Publish your site.</p>"},{"location":"guides/mkdocs/#further-reading","title":"Further Reading","text":"<ul> <li>Converting from/to markdown</li> </ul>"},{"location":"guides/mnemonics/","title":"Mnemonics","text":""},{"location":"guides/mnemonics/#mnemonics","title":"Mnemonics","text":"<p>This page outlines stuff I stumble upon, remember that I actually know this, but still not use in my daily practice and forgot about. Shame on me, because I should use this!</p>"},{"location":"guides/mnemonics/#use-the-right-tool-for-the-work","title":"Use the right tool for the work","text":""},{"location":"guides/mnemonics/#install","title":"<code>install</code>","text":"<p>Often there is a simple tool that does exactly what you want. Consider this piece of a bash script:</p> <pre><code>mkdir /etc/systemd/system/podman.service.d\nchmod 0755 /etc/systemd/system/podman.service.d\nchown root:root /etc/systemd/system/podman.service.d\ncp podman.conf /etc/systemd/system/podman.service.d/\nchmod 0644 /etc/systemd/system/podman.service.d/podman.conf\nchown root:root /etc/systemd/system/podman.service.d/podman.conf\n</code></pre> <p>The above works perfectly well. Is it readable? Yes, probably. Still, there is a tool for this. Not often used in the wild, but mandatory for package maintainers, <code>install</code>. The sole purpose of this is tool is to install files with the correct mode and ownership in a single command. The above using <code>install</code> would then look like:</p> <pre><code>install -o root -g root -m 0755 -d /etc/systemd/system/podman.service.d\ninstall -o root -g root -m 0644 podman.conf /etc/systemd/system/podman.service.d\n</code></pre> <p>More elegant, isn't it? So, go and use <code>install</code> from now on!</p>"},{"location":"guides/neovim/","title":"Neovim","text":""},{"location":"guides/neovim/#neovim","title":"Neovim","text":"<p>This guide is not about Vim in general, there is already one, but about Neovim and its ecosystem.</p>"},{"location":"guides/neovim/#from-initvim-to-initlua","title":"From init.vim to init.lua","text":"<p>Neovim embeds Lua as a first-class citizen to write Vim plugins. This is massively faster than the interpreted VimL. As a consequence it can also be used for configuring Neovim. These articles helped me to make the transition from VimL based configuration to lua based configuration. These are three articles that help on the journey:</p> <ul> <li>Everything you need to know to configure Neovim using lua</li> <li>From init.vim to init.lua</li> <li>Getting started using Lua in Neovim</li> </ul>"},{"location":"guides/neovim/#this-that","title":"This &amp; That","text":""},{"location":"guides/neovim/#various-links","title":"Various Links","text":"<p>Script to convert snippets from UltiSnips to luasnip</p>"},{"location":"guides/tmux/","title":"tmux","text":""},{"location":"guides/tmux/#tmux","title":"tmux","text":""},{"location":"guides/tmux/#installation","title":"Installation","text":"macOSLinux <p>brew install tmux</p> <p>TBD</p>"},{"location":"guides/tmux/#configuration","title":"Configuration","text":"<p>TDB</p>"},{"location":"guides/tmux/#additonal-tools","title":"Additonal Tools","text":""},{"location":"guides/tmux/#tmuxp","title":"tmuxp","text":"<ul> <li>The Tao of tmux</li> <li>gihtub.com/tmux-python/tmuxp</li> <li>tmuxp Documentation</li> <li>archlinux Wiki on tmuxp</li> </ul>"},{"location":"guides/vagrant/","title":"Vagrant","text":""},{"location":"guides/vagrant/#vagrant","title":"Vagrant","text":"<p>Vagrant is a must have CLI tool to manage local virtual machines using VirtualBox (or VMware Fusion or they-name-it). You can script every aspect of creating, provisioning, saving and destroying VMs. This makes this tool perfect for DevOps testing locally on your machine or even out in a cloud.</p> <p>See the Vagrant Documentation for a primer.</p>"},{"location":"guides/vagrant/#installation","title":"Installation","text":"<p>The installation process is well outlined at the Download Vagrant page.</p> <p>For macOS users the simplest is to use brew as Vagrant is a cask and there's bash completion formula. Just run:</p> <pre><code>brew install vagrant vagrant-completion\n</code></pre>"},{"location":"guides/vagrant/#vm-config-examples","title":"VM config examples","text":"<p>@TODO</p>"},{"location":"guides/vagrant/#tips-tricks-how-to","title":"Tips &amp; Tricks / How to...","text":""},{"location":"guides/vagrant/#change-names-vm-name-hostname","title":"Change names (VM name, hostname, ...)","text":"<p>There are at least the following levels of naming a virtual server depending on the context:</p> <ul> <li>Machine Name: The name of the virtual server when running <code>vagrant status</code>   or that you see when starting the VM: <code>Bringing machine 'label' up with   'virtualbox' provider...</code>.</li> <li>VM Name: The name of the underlying VirtualBox Machine that you see in the   Virtualbx GUI Client and that is used as the name for its subdir in your   <code>VirtualBox VMs</code> directory or that you see when running <code>VBoxManage list vms</code></li> <li>Hostname: The hostname that is set within the virtual machine AKA the   running guest OS</li> </ul> <p>The question inherently arises: How are these set by default and how can I customize them? Well the documentation is not that clear about all this but fear not, you're covered with systematic examples below.</p> <p>All these examples are run in a project directory named \"myproject\" using Vagrant-2.2.18 on VirtualBox-6.1.26r145957.</p> <p>Example 1: All defaults, e.g. only specifying the base box to use</p> <pre><code>Vagrant.configure(\"2\") do |config|\n  config.vm.box = \"geerlingguy/rockylinux8\"\nend\n</code></pre> <p>Result:</p> Machine Name VM Name Guest OS Nostname $(hostname -f) default myproject_default_1632646458961_81073 localhost <p>Discussion: Vagrant chooses  as the default name of the machine. The name on Virtualbox side is generated (see generating code) as <code>&lt;DIRECTORY&gt;_&lt;MACHINE_NAME&gt;_&lt;TIMESTAMP&gt;_&lt;RANDOM_NUMBER&gt;</code> unless explicitly set, see next examples. The hostname seems to be unchanged, e.g. the hostname of the basebox, localhost in the example.</p> <p>Example 2: Explicitly define a VM and set a machine name</p> <pre><code>Vagrant.configure(\"2\") do |config|\n  config.vm.box = \"geerlingguy/rockylinux8\"\n\n  # Explicitly define a vm; first argument is the machine name\n  config.vm.define \"webserver\"\nend\n</code></pre> <p>Result:</p> Machine Name VM Name Guest OS Nostname $(hostname -f) webserver myproject_webserver_1632646458961_81073 localhost <p>Discussion: Now the default machine name has been overwritten with <code>webserver</code>. This also opens the door to mult-machine setups. As you can see the new machine name is also found in the generated vm name that is visible when running <code>VBoxManage list vms</code> or in the VirtualBox GUI client.</p> <p>Example 3: Set the hostname of the Guest OS</p> <pre><code>Vagrant.configure(\"2\") do |config|\n  config.vm.box = \"geerlingguy/rockylinux8\"\n\n  # Explicitly define a vm; first argument is the machine name\n  config.vm.define \"webserver\"\n  config.vm.hostname = \"web01.test.com\"\nend\n</code></pre> <p>Result:</p> Machine Name VM Name Guest OS Nostname $(hostname -f) webserver myproject_webserver_1632646458961_81073 web01.test.com <p>Discussion: Vagrant now sets the hostname within the guest OS to the specified value: </p><pre><code>[vagrant@web01 ~]$ hostname -s\nweb01\n[vagrant@web01 ~]$ hostname -f\nweb01.test.com\n</code></pre><p></p> <p>Example 4: Set the hostname of the Guest OS</p> <pre><code>Vagrant.configure(\"2\") do |config|\n  config.vm.box = \"geerlingguy/rockylinux8\"\n\n  # Explicitly define a vm; first argument is the machine name\n  config.vm.define \"webserver\"\n  config.vm.hostname = \"web01.test.com\"\n  config.vm.provider :virtualbox do |vb|\n    vb.name = \"webserver01\"\n  end\nend\n</code></pre> <p>Result:</p> Machine Name VM Name Guest OS Nostname $(hostname -f) webserver webserver01 web01.test.com <p>Discussion: This example, in addition, is setting the name on the virtualbox provider object, which results in a renamed VM. The VM no longer has its name generated as described in example 1, but the name is now set explicitly, see GUI client or <code>VBoxManage list vms</code>.</p> <p>But wait... there's one more! Instead of setting <code>name</code> on the provider object, it's possible to have Vagrant call <code>VBoxManage</code> and have it set the name. This overrides all of the previous methods: </p><pre><code>  config.vm.provider :virtualbox do |vb|\n    vb.name = \"webserver01\"\n    vb.customize [\"modifyvm\", :id, \"--name\", \"web01\"]\n  end\n</code></pre> In the above example, the final name of the VM will be <code>web01</code>.<p></p> <p>Conclusion</p> <p>It makes sense to use of these powerful possibilities of naming things. Especially it is useful to use them to namespace the virtual machines because when approaching the setup from the VM perspective you can map the VM instance to a project and the servers there in. Therefore if you set it to an absolute name using <code>VBoxManage</code>, I'd suggest to namespace it to the project it belongs to, something like \"myproject_webserver01\" or something like that.</p>"},{"location":"guides/vagrant/#change-machine-settings-like-ram-network-cards","title":"Change machine settings like RAM, network cards, ...","text":"<p>These configuration options are provider-specific. For VirtualBox have a look on the respective page in the documentation. Summarized with two examples, it's possible to set almost everything by calling <code>VBoxManage</code> from within the Vagrantfile. The vb.customize directive calls <code>VBoxManage</code> and the contents of the array specified as its argument are passed straight to it. See <code>VBoxManage --help</code> for all the possible targets - there a lot!</p> <p>Example modifying apects of a virtualbox machine</p> <pre><code>config.vm.provider \"virtualbox\" do |vb|\n  vb.customize [\"modifyvm\", :id, \"--cpuexecutioncap\", \"50\"]\n  vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n  vb.customize [\"modifyvm\", :id, \"--memory\", \"384\"]\n  vb.customize [\"modifyvm\", :id, \"--nic3\", \"intnet\"]\n  vb.customize [\"modifyvm\", :id, \"--nic4\", \"intnet\"]\nend\n\n# There are some convenience shortcuts for memory and CPU settings:\nconfig.vm.provider \"virtualbox\" do |vb|\n  vb.memory = 1024\n  vb.cpus = 2\nend\n</code></pre>"},{"location":"guides/vagrant/#setting-a-fixed-port-for-ssh-forwwards","title":"Setting a fixed port for SSH forwwards","text":"<p>Normally the ssh from the guest is automatically forwarded to port 2222 on the host. When port the latter port is already in use for another running VM, the next free post &gt;2222 is choesen. This makes the port dependent of the order you start the VMs. While most of the time this is not a problem, you sometimes still want a fixed set of IPs for a project. Add this to your <code>Vagrantfile</code> for each machine you like to fix the forwarded SSH port:</p> <pre><code>```ruby\n  config.vm.network \"forwarded_port\", guest: 22, host: 12345, id: \"ssh\"\n```\n</code></pre> <p>Source was this ticket and this blog entry.</p>"},{"location":"guides/vim/","title":"Vim","text":""},{"location":"guides/vim/#vim","title":"Vim","text":""},{"location":"guides/vim/#installing-vim","title":"Installing Vim","text":"macOSLinux <p>On macOS Vim is also already installed, but it's quite an onld version and has no python support built in. Therefore it's suggested to install a recent version using Homebrew: <code>brew install vim</code></p> <p>Every Linux distribution brings a Vim package that is installable by using the distribution's package manager.</p> <p>Besides Vim also consider to use Neovim right away. This is a modern drop-in replacement for Vim. That means it function almost identical, can almost be identically configured, but feature Lua support and a lot more possibilities and features. Neovim can also be installed using Homebrew or from a pre-built package. See Neovim releases for the download links.</p>"},{"location":"guides/vim/#tutorials","title":"Tutorials","text":"<p>When beginning the journey of master Vim, a first stop might the built in tutorial. Type <code>vimtutor</code> to start this \"interactive document\".</p> <p>There is huge Vim tutorial in 5 pieces targetting beginners and builds up to veterans:</p> <ul> <li>Is Vim Really Not For You? A Beginner Guide</li> <li>A Vim Guide for Intermediate Users</li> <li>A Vim Guide for Advanced Users</li> <li>A Vim Guide for Adept Users</li> <li>A Vim Guide for Veteran Users</li> </ul> <p>And other Tutorials with its strengths and weaknesses:</p> <ul> <li>Boost your coding fu</li> <li>Boost.. Cheatsheet</li> <li>Learn Vim Progressively</li> </ul> <p>And espcially about Text Objects:</p> <ul> <li>Vim Text Objects: The Definitive Guide</li> </ul> <p>And Vimscript which also covers customizing Vim and not only plugin development:</p> <ul> <li>Learn Vimscript the Hard Way</li> </ul> <p>And finally one from the Vim project leader Bram Moolenaar himself, though not for beginners but those that already know Vim for some time but want to get better:</p> <ul> <li>Seven habits of effective text editing</li> </ul> <p>There's even a browser game vim-adventures that teaches Vim.</p>"},{"location":"guides/vim/#learning-videos","title":"Learning Videos","text":""},{"location":"guides/vim/#the-vim-tutorial-beginner","title":"The Vim Tutorial (beginner)","text":""},{"location":"guides/vim/#mastering-the-vim-language-advanced","title":"Mastering the Vim Language (advanced)","text":""},{"location":"guides/vim/#how-to-do-90-of-what-plugins-do-with-just-vim-advanced","title":"How to Do 90% of What Plugins Do (With Just Vim) (advanced)","text":""},{"location":"guides/vim/#in-vim-how-do-i","title":"In vim, how do I...","text":""},{"location":"guides/vim/#replace-line-breaks","title":"replace line breaks?","text":"<p>As a command, type</p> <pre><code>:%s/^M$//\n</code></pre> <p>To get ^M, press Ctrl+V followd by Ctrl+M</p>"},{"location":"guides/vim/#search-and-replace-over-all-project-files","title":"search and replace over all project files","text":"<p>This recipe is copied and condensed from jdhao's blog.</p> <p>We can use <code>vimgrep</code> command to populate the Vim quickfix list with files matching our specific pattern. The <code>cfdo</code> command can then be utilized to perform replacement operation for each file in the quickfix list.</p>"},{"location":"guides/vim/#vimgrep","title":"vimgrep","text":"<p>To find all files containing Neovim under current directory using <code>vimgrep</code>, we can use the following the command:</p> <pre><code>:vimgrep /Neovim/gj **/*\n</code></pre> <p>In the above command, Neovim is our search pattern. The meanings of g and j flags are as follows:</p> <ul> <li>g: Add all matches in a line to the quickfix list.</li> <li>j: Do not jump the cursor to the location of first pattern match.</li> </ul> <p>The <code>**/*</code> specify the files to search for the pattern. In this case, it means to search recursively under the current directory and for all files types. You can also search only in certain files types by adding a file type to the search pattern.</p> <p>After this step, the quickfix will be populated with the matching files, lines and column number (use <code>copen</code> to open the quickfix list):</p>"},{"location":"guides/vim/#cfdo","title":"cfdo","text":"<p>After the quickfix list is filled with files containing the search pattern, we now use <code>cfdo</code> command to perform replace operation on each file:</p> <pre><code>:cfdo %s/Neovim/Nvim/ge | update\n</code></pre> <p>The <code>cfdo</code> command can be followed by one command or a series of commands (separated by <code>|</code>). In the above example, we first perform substitution, then followed by update command so that the replacement change is saved.</p>"},{"location":"guides/vim/#suggested-plugins","title":"Suggested Plugins","text":""},{"location":"guides/vim/#general-plugins","title":"General Plugins","text":"<p>vim-surround</p> <p>The plugin tpope/vim-surround by Tim Pope feature text objects and commands regaring manipulation of surroundings. See the glorious tutoriol of Daniel Weibel.</p> <p>vim-indent-object</p> <p>This plugin features new text objects for working on indendet blocks of any kind. Found at vim-text-objects. For usage see the docs</p>"},{"location":"guides/vim/#markdown","title":"Markdown","text":"<p>There's a good write-up on using markdown in Vim</p> <p>vim-criticmarkup</p> <p>If using ciritic markup, this plugin adds vim functions to approve or reject changes, though obviously not maintained anymore. Recommended by vim-markdown.</p> <p>Another good blog post is Markdown Writing and Previewing in Neovim - A Complete Guide</p>"},{"location":"guides/vim/#further-readings","title":"Further Readings","text":"<p>Vim/Nvim useful tricks: Lots of short tips on shortcuts</p>"},{"location":"guides/zsh/","title":"Zsh","text":""},{"location":"guides/zsh/#zsh","title":"Zsh","text":"<p>I finally switched from Bash to Zsh too on my desktop machines. You can consult my configuration in my dotfiles.</p>"},{"location":"guides/zsh/#various-articles-worth-reading","title":"Various Articles Worth Reading","text":"<ul> <li>A Guide to the Zsh Completion with Examples</li> <li>How to profile your zsh startup time</li> </ul>"},{"location":"guides/zsh/#using-colors-in-scripts","title":"Using colors in Scripts","text":"<p>Zsh provides a module one load that sets up some variables to use to style your terminal output. Load the module with</p> <pre><code>autoload -Uz colors &amp;&amp; colors\n</code></pre> <p>This defines the following arrays:</p> <ul> <li><code>color</code> and <code>colour</code> with a lot of associations between words and ANSI codes</li> <li><code>$fg</code>, <code>$fg_bold</code> and <code>$fg_no_bold</code> for foreground color sequences</li> <li><code>$bg</code>, <code>$bg_bold</code> and <code>$bg_no_bold</code> for background color sequences</li> </ul> <p>Some examples:</p> <ul> <li><code>$color[31]</code> has value <code>red</code> while <code>$color[red]</code> has value <code>31</code></li> <li>The <code>$fg[red]</code> has emits an escape sequence to change foreground color to red</li> <li>The <code>$bg[blue]</code> has emits an escape sequence to change background color to   blue</li> <li><code>$reset_color</code> does a color reset</li> </ul> <p>The fg* and bg* arrays contain the following colors:</p> <ul> <li>black</li> <li>blue</li> <li>cyan</li> <li>default</li> <li>gray</li> <li>green</li> <li>grey</li> <li>magenta</li> <li>red</li> <li>white</li> <li>yellow</li> </ul> <p>Based on this blog post</p>"},{"location":"guides/scripting/bash_heredoc/","title":"Bash Heredoc","text":""},{"location":"guides/scripting/bash_heredoc/#bash-heredoc","title":"Bash Heredoc<sup>1</sup>","text":"<p>When writing shell scripts you may be in a situation where you need to pass a multiline block of text or code to an interactive command, such as tee , cat, or sftp .</p> <p>In Bash and other shells like Zsh, a Here document (Heredoc) is a type of redirection that allows you to pass multiple lines of input to a command.</p> <p>The syntax of writing Heredoc takes the following form:</p> <pre><code>[COMMAND] &lt;&lt;[-] 'DELIMITER'\n  HERE-DOCUMENT CONTENT\nDELIMITER\n</code></pre> <ul> <li>The first line starts with an optional command followed by the special   redirection operator &lt;&lt; and the delimiting identifier.</li> <li>You can use any string as a delimiting identifier, the most commonly used   are EOF or END.</li> <li>If the delimiting identifier is unquoted, the shell will substitute all   variables, commands and special characters before passing the here-document   lines to the command.</li> <li>Appending a minus sign to the redirection operator &lt;&lt;-, will cause all   leading tab characters to be ignored. This allows you to use indentation   when writing here-documents in shell scripts. Leading whitespace characters   are not allowed, only tab.</li> <li>The here-document block can contain strings, variables, commands and any other type of input.</li> <li>The last line ends with the delimiting identifier. White space in front of the delimiter is not allowed.</li> </ul>"},{"location":"guides/scripting/bash_heredoc/#basic-heredoc-examples","title":"Basic Heredoc Examples","text":"<p>In this section, we will look at some basic examples of how to use heredoc.</p> <p>Heredoc is most often used in combination with the cat command .</p> <p>In the following example, we are passing two lines of text containing an environment variable and a command to cat using a here document.</p> <pre><code>cat &lt;&lt; EOF\nThe current working directory is: $PWD\nYou are logged in as: $(whoami)\nEOF\n</code></pre> <p>As you can see from the output below, both the variable and the command output are substituted:</p> <pre><code>Output\nThe current working directory is: /home/linuxize\nYou are logged in as: linuxize\n</code></pre> <p>Let\u2019s see what will happen if we enclose the delimiter in single or double quotes.</p> <pre><code>cat &lt;&lt;- \"EOF\"\nThe current working directory is: $PWD\nYou are logged in as: $(whoami)\nEOF\n</code></pre> <p>You can notice that when the delimiter is quoted no parameter expansion and command substitution is done by the shell.</p> <pre><code>Output\nThe current working directory is: $PWD\nYou are logged in as: $(whoami)\n</code></pre> <p>If you are using a heredoc inside a statement or loop, use the &lt;&lt;- redirection operation that allows you to indent your code.</p> <pre><code>if true; then\n    cat &lt;&lt;- EOF\n    Line with a leading tab.\n    EOF\nfi\n</code></pre> <pre><code>Output\nLine with a leading tab.\n</code></pre> <p>Instead of displaying the output on the screen you can redirect it to a file using the &gt;, &gt;&gt; operators.</p> <pre><code>cat &lt;&lt; EOF &gt; file.txt\nThe current working directory is: $PWD\nYou are logged in as: $(whoami)\nEOF\n</code></pre> <p>If the file.txt doesn't exist it will be created. When using &gt; the file will be overwritten, while the &gt;&gt; will append the output to the file.</p> <p>The heredoc input can also be piped. In the following example the sed command will replace all instances of the l character with e:</p> <pre><code>cat &lt;&lt;'EOF' |  sed 's/l/e/g'\nHello\nWorld\nEOF\n</code></pre> <pre><code>Heeeo\nWored\n</code></pre> <p>To write the piped data to a file:</p> <pre><code>cat &lt;&lt;'EOF' |  sed 's/l/e/g' &gt; file.txt\nHello\nWorld\nEOF\n</code></pre>"},{"location":"guides/scripting/bash_heredoc/#using-heredoc-with-ssh","title":"Using Heredoc with SSH","text":"<p>Using Heredoc is one of the most convenient and easiest ways to execute multiple commands on a remote system over SSH .</p> <p>When using unquoted delimiter make sure you escape all variables, commands and special characters otherwise they will be interpolated locally:</p> <pre><code>ssh -T user@host.com &lt;&lt; EOF\necho \"The current local working directory is: $PWD\"\necho \"The current remote working directory is: \\$PWD\"\nEOF\n</code></pre> <pre><code>The current local working directory is: /home/linuxize\nThe current remote working directory is: /home/user\n</code></pre> <p>You may also want to set up an SSH key-based authentication and connect to your Linux servers without entering a password.</p> <ol> <li> <p>Shamelessly copied over from   linuxize.com and slightly changed.   Kudos to the original author!\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/scripting/sed/","title":"Sed","text":""},{"location":"guides/scripting/sed/#sed","title":"sed","text":"<p>Sed on Linux is not the same as sed on macOS!</p> <p>One word of warning right away before you fall into the same pitfall as I did (several times!). The sed that is shipped with macOS does not work the same as GNU sed shipped with a Linux distribution. There are subtle differences like handling regular expressions or i.e. the <code>-i</code> option. If you want to be sure to have the same GNU sed as on Linux, install <code>gnu-sed</code> using Homebrew and then use gsed instead of sed or make your scripts platform-aware and build the commmands accordingly.</p> <p>Burce Barnett: Intro and Tutorial to Sed</p>"},{"location":"plesk/useful_cli_commands/","title":"Useful Commands","text":""},{"location":"plesk/useful_cli_commands/#useful-cli-commands-for-plesk","title":"Useful CLI Commands for Plesk","text":""},{"location":"plesk/useful_cli_commands/#subscriptionsite-management","title":"Subscription/Site Management","text":""},{"location":"plesk/useful_cli_commands/#domain-aliases","title":"Domain Aliases","text":"<p>To create a domain alias that only redirects to the main domain without creating a new site, use the following <code>domalias</code> command:</p> <pre><code>plesk bin domalias --create aliasdomain.net -domain maindomain.net\n</code></pre> <p>See domalias: Domain Aliases for more information.</p>"},{"location":"plesk/useful_cli_commands/#user-management","title":"User Management","text":""},{"location":"plesk/useful_cli_commands/#create-an-additional-administrator","title":"Create an Additional Administrator","text":"<pre><code>PSA_PASSWORD=\"$password\" plesk bin admin_alias \\\n  --create $username \\\n  -passwd '' \\\n  -contact \"$display_name\" \\\n  -comment \"$comment\" \\\n  -email \"$email\"\n</code></pre> <p>See admin_alias: Additional Administrator Accounts for more information.</p>"},{"location":"plesk/useful_cli_commands/#server-configuration","title":"Server Configuration","text":""},{"location":"plesk/useful_cli_commands/#disable-tlsv1-and-tlsv11","title":"Disable TLSv1 and TLSv1.1","text":"<pre><code># /usr/local/psa/bin/server_pref -s | grep ssl-protocols\nssl-protocols: TLSv1 TLSv1.1 TLSv1.2 TLSv1.3\n\n/usr/local/psa/bin/server_pref -u -ssl-protocols \"TLSv1.2 TLSv1.3\"\n\n# /usr/local/psa/bin/server_pref -s | grep ssl-protocols\nssl-protocols: TLSv1.2 TLSv1.3\n\n## Other Commands\n\n### Fail2Ban Management\n\n```bash\n# Show list of trusted IPs\nplesk bin ip_ban -t\n\n# Add additional IPs to the trusted list\nplesk bin ip_ban --add-trusted \"1.2.3.4 5.6.7.8 9.10.11.12\"\n\n# Show list of banned IPs\nplesk bin ip_ban -b\n\n# Unban an IP\nplesk bin ip_ban --unban 1.2.3.4\n</code></pre> <p>See ip_ban: IP Address Banning (Fail2Ban) for more information.</p>"}]}